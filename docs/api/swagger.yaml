openapi: 3.0.3
info:
  title: Business Management API
  description: |
    API para sistema de gestión empresarial que incluye manejo de productos, inventarios, ventas, compras, clientes, proveedores y programación automática.
    
    ## Características principales:
    - Gestión de productos, categorías y precios
    - Control de inventarios y stock
    - Administración de clientes y proveedores
    - Registro de ventas y compras
    - Sistema de programación automática
    - Autenticación JWT
    
    ## Autenticación
    La mayoría de endpoints requieren autenticación mediante JWT token en el header Authorization.
  version: "1.0.0"
  contact:
    name: Business Management API
    email: support@businessmanagement.com
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT

servers:
  - url: http://localhost:5050
    description: Servidor de desarrollo
  - url: https://api.businessmanagement.com
    description: Servidor de producción

security:
  - BearerAuth: []

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: "Agregar 'Bearer ' seguido del token JWT"

  schemas:
    # Authentication Models
    SignUpLoginRequest:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          format: email
          example: "myemail"
        password:
          type: string
          format: password
          minLength: 6
          example: "mypassword"

    LoginResponse:
      type: object
      properties:
        token:
          type: string
          example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
        role_id:
          type: string
          example: "admin"

    # User Models
    User:
      type: object
      properties:
        id:
          type: string
          example: "user_123"
        first_name:
          type: string
          example: "Juan"
        last_name:
          type: string
          example: "Pérez"
        email:
          type: string
          format: email
          example: "juan.perez@ejemplo.com"
        password:
          type: string
          format: password
        status:
          type: string
          example: "active"

    # Category Models
    Category:
      type: object
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: "Electrónicos"
        description:
          type: string
          example: "Productos electrónicos y tecnológicos"

    # Product Models
    Product:
      type: object
      properties:
        id:
          type: string
          example: "bcYdWdKNR"
        name:
          type: string
          example: "Puma MB.01"
        state:
          type: boolean
          example: true
        category:
          $ref: '#/components/schemas/Category'
      required:
        - name
        - id_category

    ProductDetails:
      type: object
      description: Producto con todos sus detalles relacionados en una sola respuesta
      properties:
        id:
          type: string
          description: ID único del producto
          example: "GA4w4YlYpVP1LNji17o9FKbp8Dg"
        name:
          type: string
          description: Nombre del producto
          example: "Onion - Dried"
        state:
          type: boolean
          description: Estado del producto (activo/inactivo)
          example: true
        category_id:
          type: integer
          description: ID de la categoría
          example: 9
        user_id:
          type: string
          description: ID del usuario que creó el producto
          example: "2prrJIgRvgaFVbuu49ua9QJVu8n"
        product_type:
          type: string
          enum: [PHYSICAL, SERVICE]
          description: Tipo de producto
          example: "PHYSICAL"
        category:
          $ref: '#/components/schemas/Category'
          description: Información completa de la categoría
        stock:
          $ref: '#/components/schemas/StockDetails'
          description: Stock actual del producto (null si no tiene)
        price:
          $ref: '#/components/schemas/PriceDetails'
          description: Precio actual del producto (null si no tiene)
        description:
          $ref: '#/components/schemas/DescriptionDetails'
          description: Descripción del producto (null si no tiene)
      required:
        - id
        - name
        - state
        - category_id
        - user_id
        - product_type

    StockDetails:
      type: object
      description: Detalles del stock de un producto
      properties:
        id:
          type: integer
          description: ID del registro de stock
          example: 110
        quantity:
          type: integer
          description: Cantidad en stock
          example: 7
        effective_date:
          type: string
          format: date-time
          description: Fecha de efectividad del stock
          example: "2025-06-03T14:33:52.613475Z"
        metadata:
          type: object
          description: Metadatos adicionales del stock
          additionalProperties: true
          example:
            type: "stock_adjustment"
            po_id: 9
            action: "cancel_po_return"

    PriceDetails:
      type: object
      description: Detalles del precio de un producto
      properties:
        id:
          type: integer
          description: ID del registro de precio
          example: 54
        purchase_price:
          type: number
          format: float
          description: Precio de compra
          example: 320000.00
        effective_date:
          type: string
          format: date-time
          description: Fecha de efectividad del precio
          example: "2025-05-26T17:39:41.446265Z"
        metadata:
          type: object
          description: Metadatos adicionales del precio
          additionalProperties: true
          example:
            po_id: 9
            source: "purchase_order_cancellation"

    DescriptionDetails:
      type: object
      description: Detalles de la descripción de un producto
      properties:
        id:
          type: integer
          description: ID del registro de descripción
          example: 15
        description:
          type: string
          description: Descripción del producto
          example: "Cebolla deshidratada premium para uso culinario"
        effective_date:
          type: string
          format: date-time
          description: Fecha de efectividad de la descripción
          example: "2025-01-15T10:30:00Z"

    ProductRequest:
      type: object
      properties:
        name:
          type: string
          example: "Nike Air Max 90 PRO"
        id_category:
          type: integer
          example: 5
        state:
          type: boolean
          example: true
        description:
          type: string
          example: "Zapatillas deportivas de alta calidad con tecnología Air Max para máximo confort"
      required:
        - name
        - id_category
        - description

    ProductDescription:
      type: object
      properties:
        id:
          type: integer
          example: 8
        product_id:
          type: string
          example: "bcYdWdKNR"
        description:
          type: string
          example: "nullam sit amet turpis elementum ligula vehicula consequat morbi a ipsum integer a."
        effective_date:
          type: string
          format: date-time
          example: "2024-01-15T10:30:00Z"
        id_user:
          type: string
          example: "2pmK5NPfHiRwZUkcd3d3cETC2JW"

    ProductDescriptionRequest:
      type: object
      properties:
        description:
          type: string
          example: "Lorem ipsun new generated."
      required:
        - description

    ProductPrice:
      type: object
      properties:
        id:
          type: integer
          example: 53
        product_id:
          type: string
          example: "bcYdWdKNR"
        cost_price:
          type: number
          format: float
          example: 1250000.00
        sale_price:
          type: number
          format: float
          example: 1500000.00
        tax:
          type: number
          format: float
          example: 30.00
        last_updated_by:
          type: string
          example: "2pmK5NPfHiRwZUkcd3d3cETC2JW"
        created_at:
          type: string
          format: date-time
          example: "2024-01-15T10:30:00Z"
        updated_at:
          type: string
          format: date-time
          example: "2024-01-15T10:30:00Z"
        metadata:
          type: object
          example: {"currency": "COP", "tax_included": false}

    ProductPriceRequest:
      type: object
      properties:
        cost_price:
          type: number
          format: float
          example: 1250000.00
        sale_price:
          type: number
          format: float
          example: 1500000.00
        tax:
          type: number
          format: float
          example: 30.00
      required:
        - cost_price

    # Client Models
    Client:
      type: object
      properties:
        id:
          type: string
          example: "client_123"
        name:
          type: string
          example: "María"
        last_name:
          type: string
          example: "González"
        document_id:
          type: string
          example: "12345678"
        status:
          type: boolean
          example: true
        user_id:
          type: string
          example: "user_123"
        created_at:
          type: string
          format: date-time
          example: "2024-01-15T10:30:00Z"
        contact:
          type: string
          example: "+1234567890"

    # Supplier Models
    Supplier:
      type: object
      properties:
        id:
          type: string
          example: "supplier_123"
        name:
          type: string
          example: "Tech Supplies Inc."
        contact:
          type: string
          example: "contact@techsupplies.com"
        address:
          type: string
          example: "123 Business St, City"
        status:
          type: boolean
          example: true

    # Stock Models
    Stock:
      type: object
      properties:
        id:
          type: integer
          example: 2
        product_id:
          type: string
          example: "bcYdWdKNR"
        quantity:
          type: integer
          example: 25
        exp:
          type: string
          format: date
          example: "2055-02-26"
        entity:
          type: object
          properties:
            name:
              type: string
              example: "POSTMAN"
        min_stock:
          type: integer
          example: 10
        max_stock:
          type: integer
          example: 100

    StockRequest:
      type: object
      properties:
        quantity:
          type: integer
          example: 16
        exp:
          type: string
          format: date
          example: "2040-08-26"
        entity:
          type: object
          properties:
            name:
              type: string
              example: "POSTMAN"
      required:
        - quantity

    # Inventory Models
    Inventory:
      type: object
      properties:
        id:
          type: string
          example: "17"
        date:
          type: string
          format: date-time
          example: "2024-01-15T10:30:00Z"
        status:
          type: string
          example: "active"
        user_id:
          type: string
          example: "2pmK5NPfHiRwZUkcd3d3cETC2JW"

    InventoryRequest:
      type: array
      items:
        type: object
        properties:
          product_id:
            type: string
            example: "IFQ12rtRfwl37D6r17j4QajgzRM"
          quantity_checked:
            type: integer
            example: 22
        required:
          - product_id
          - quantity_checked
      example:
        - product_id: "IFQ12rtRfwl37D6r17j4QajgzRM"
          quantity_checked: 22
        - product_id: "BXLH1gKpokq6eHBc24m14gq9Dco"
          quantity_checked: 11
        - product_id: "oPfF1ThrpC34mArR38d2EusgsJL"
          quantity_checked: 8
        - product_id: "eM6T4lJ3jLH1QMSh84j4byvdP5s"
          quantity_checked: 75

    # Purchase Models
    Purchase:
      type: object
      properties:
        id:
          type: string
          example: "purchase_123"
        supplier_id:
          type: string
          example: "supplier_123"
        total_amount:
          type: number
          format: float
          example: 1500.00
        purchase_date:
          type: string
          format: date-time
          example: "2024-01-15T10:30:00Z"
        status:
          type: string
          example: "completed"

    # Sale Models
    Sale:
      type: object
      properties:
        id:
          type: string
          example: "sale_123"
        client_id:
          type: string
          example: "client_123"
        total_amount:
          type: number
          format: float
          example: 299.99
        sale_date:
          type: string
          format: date-time
          example: "2024-01-15T10:30:00Z"
        status:
          type: string
          example: "completed"

    # Tax Rate Models
    TaxRate:
      type: object
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: "IVA"
        rate:
          type: number
          format: float
          example: 0.16
        description:
          type: string
          example: "Impuesto al Valor Agregado"

    # Schedule Models
    Schedule:
      type: object
      properties:
        id:
          type: string
          example: "schedule_123"
        product_id:
          type: string
          example: "prod_123"
        scheduled_date:
          type: string
          format: date-time
          example: "2024-01-15T10:30:00Z"
        status:
          type: string
          example: "available"

    # Manual Adjustment Models
    ManualAdjustment:
      type: object
      properties:
        id:
          type: string
          example: "adj_123"
        product_id:
          type: string
          example: "prod_123"
        adjustment_type:
          type: string
          example: "increase"
        quantity:
          type: integer
          example: 10
        reason:
          type: string
          example: "Stock correction"
        created_at:
          type: string
          format: date-time
          example: "2024-01-15T10:30:00Z"

    # Common Response Models
    ErrorResponse:
      type: object
      properties:
        error:
          type: string
          example: "Error message description"
        code:
          type: integer
          example: 400

    SuccessResponse:
      type: object
      properties:
        message:
          type: string
          example: "Operation completed successfully"
        data:
          type: object

    PaginatedResponse:
      type: object
      properties:
        data:
          type: array
          items:
            type: object
        page:
          type: integer
          example: 1
        page_size:
          type: integer
          example: 10
        total:
          type: integer
          example: 100

paths:
  # Authentication Endpoints
  /:
    get:
      tags:
        - Home
      summary: Home endpoint
      description: Endpoint básico de bienvenida
      security: []
      responses:
        '200':
          description: Respuesta exitosa
          content:
            text/plain:
              schema:
                type: string
                example: "Welcome to Business Management API"

  /signup:
    post:
      tags:
        - Authentication
      summary: Registro de usuario
      description: Registra un nuevo usuario en el sistema
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SignUpLoginRequest'
      responses:
        '200':
          description: Usuario registrado exitosamente
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
        '400':
          description: Datos de entrada inválidos
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Error interno del servidor
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /login:
    post:
      tags:
        - Authentication
      summary: Inicio de sesión
      description: Autentica un usuario y devuelve un token JWT
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SignUpLoginRequest'
      responses:
        '200':
          description: Login exitoso
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
        '400':
          description: Credenciales inválidas
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Error interno del servidor
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  # Category Endpoints
  /categories:
    get:
      tags:
        - Categories
      summary: Obtener todas las categorías
      description: |
        Recupera la lista de todas las categorías disponibles.
        
        **✅ No requiere autenticación** - Endpoint público para facilitar la integración.
      security: []
      responses:
        '200':
          description: Lista de categorías
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Category'
              example:
                - id: 1
                  name: "Electrónicos"
                  description: "Dispositivos electrónicos y gadgets"
                - id: 5
                  name: "Deportes"
                  description: "Artículos deportivos y fitness"
                - id: 9
                  name: "Baby"
                  description: "Productos para bebés y niños"
        '500':
          description: Error interno del servidor
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  # Product Endpoints
  /products/:
    post:
      tags:
        - Products
      summary: Crear nuevo producto con descripción
      description: |
        Crea un nuevo producto en el sistema junto con su descripción inicial de forma atómica.
        Esta operación garantiza que tanto el producto como su descripción se crean correctamente
        o ninguno se crea en caso de error (transacción de base de datos).
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductRequest'
            example:
              name: "Puma MB.01"
              id_category: 5
              description: "Zapatillas de baloncesto de alta performance diseñadas por LaMelo Ball"
      responses:
        '201':
          description: Producto creado exitosamente
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        '400':
          description: Datos de entrada inválidos
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /products/{id}:
    get:
      tags:
        - Products
      summary: Obtener producto por ID
      description: Recupera los detalles de un producto específico
      parameters:
        - name: id
          in: path
          required: true
          description: ID del producto
          schema:
            type: string
            example: "bcYdWdKNR"
      responses:
        '200':
          description: Detalles del producto
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        '404':
          description: Producto no encontrado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /products/{id}/details:
    get:
      tags:
        - Products
      summary: Obtener producto con todos sus detalles
      description: |
        Recupera un producto con todos sus detalles relacionados en una sola consulta optimizada:
        - Información básica del producto
        - Stock actual
        - Precio de compra
        - Descripción
        - Categoría
        
        **Ventaja**: Una sola request vs 4 requests múltiples. 4x más rápido y datos consistentes.
      parameters:
        - name: id
          in: path
          required: true
          description: ID del producto
          schema:
            type: string
            example: "GA4w4YlYpVP1LNji17o9FKbp8Dg"
      responses:
        '200':
          description: Producto con todos los detalles
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductDetails'
              example:
                id: "GA4w4YlYpVP1LNji17o9FKbp8Dg"
                name: "Onion - Dried"
                state: true
                category_id: 9
                user_id: "2prrJIgRvgaFVbuu49ua9QJVu8n"
                product_type: "PHYSICAL"
                category:
                  id: 9
                  name: "Baby"
                  description: "Lorem ipsum dolor sit amet, consectetur adipiscing elit."
                stock:
                  id: 110
                  quantity: 7
                  effective_date: "2025-06-03T14:33:52.613475Z"
                  metadata:
                    type: "stock_adjustment"
                    po_id: 9
                    action: "cancel_po_return"
                price:
                  id: 54
                  purchase_price: 320000.00
                  effective_date: "2025-05-26T17:39:41.446265Z"
                  metadata:
                    po_id: 9
                    source: "purchase_order_cancellation"
        '404':
          description: Producto no encontrado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Token no válido o expirado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /products/search/details/{name}:
    get:
      tags:
        - Products
      summary: Buscar productos con todos sus detalles por nombre
      description: |
        Busca productos por nombre y devuelve todos los productos que coincidan con todos sus detalles relacionados:
        - Información básica del producto
        - Stock actual
        - Precio de compra
        - Descripción
        - Categoría
        
        **Ventajas**: 
        - Una sola request vs múltiples requests por cada producto encontrado
        - Datos completos y consistentes para cada resultado
        - Optimizado para búsquedas rápidas en el frontend
      parameters:
        - name: name
          in: path
          required: true
          description: Nombre del producto a buscar (búsqueda parcial con ILIKE)
          schema:
            type: string
            example: "Onion"
      responses:
        '200':
          description: Lista de productos con todos los detalles
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ProductDetails'
              example:
                - id: "GA4w4YlYpVP1LNji17o9FKbp8Dg"
                  name: "Onion - Dried"
                  state: true
                  category_id: 9
                  user_id: "2prrJIgRvgaFVbuu49ua9QJVu8n"
                  product_type: "PHYSICAL"
                  category:
                    id: 9
                    name: "Baby"
                    description: "Lorem ipsum dolor sit amet, consectetur adipiscing elit."
                  stock:
                    id: 110
                    quantity: 7
                    effective_date: "2025-06-03T14:33:52.613475Z"
                    metadata:
                      type: "stock_adjustment"
                      po_id: 9
                      action: "cancel_po_return"
                  price:
                    id: 54
                    purchase_price: 320000.00
                    effective_date: "2025-05-26T17:39:41.446265Z"
                    metadata:
                      po_id: 9
                      source: "purchase_order_cancellation"
                - id: "123456789"
                  name: "Green Onion Fresh"
                  state: true
                  category_id: 5
                  user_id: "user123"
                  product_type: "PHYSICAL"
                  category:
                    id: 5
                    name: "Vegetables"
                    description: "Fresh vegetables category"
                  stock:
                    id: 111
                    quantity: 25
                    effective_date: "2025-01-15T10:00:00Z"
                    metadata:
                      type: "restock"
                      source: "supplier_delivery"
                  price:
                    id: 55
                    purchase_price: 15000.00
                    effective_date: "2025-01-10T08:00:00Z"
                    metadata:
                      supplier_id: "sup001"
                      bulk_discount: true
        '400':
          description: Parámetro name requerido
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error: "Name parameter is required"
        '500':
          description: Error interno del servidor
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Token no válido o expirado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /products/products/name/{name}:
    get:
      tags:
        - Products
      summary: Buscar productos por nombre
      description: Busca productos que coincidan con el nombre especificado
      parameters:
        - name: name
          in: path
          required: true
          description: Nombre del producto a buscar
          schema:
            type: string
            example: "Samsung"
      responses:
        '200':
          description: Lista de productos encontrados
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Product'

  /products/products/{page}/{pageSize}:
    get:
      tags:
        - Products
      summary: Obtener productos paginados
      description: Recupera una lista paginada de productos
      parameters:
        - name: page
          in: path
          required: true
          description: Número de página
          schema:
            type: integer
            minimum: 1
            example: 5
        - name: pageSize
          in: path
          required: true
          description: Cantidad de elementos por página
          schema:
            type: integer
            minimum: 1
            maximum: 100
            example: 10
      responses:
        '200':
          description: Lista paginada de productos
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedResponse'

  /products/products/{id}:
    put:
      tags:
        - Products
      summary: Actualizar producto con descripción
      description: |
        Actualiza los detalles de un producto existente junto con su descripción de forma atómica.
        Esta operación garantiza que tanto el producto como su descripción se actualizan correctamente
        o ninguno se modifica en caso de error (transacción de base de datos).
      parameters:
        - name: id
          in: path
          required: true
          description: ID del producto
          schema:
            type: string
            example: "prod_123"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductRequest'
            example:
              name: "Puma MB.01 Updated"
              id_category: 6
              state: true
              description: "Zapatillas de baloncesto actualizadas con nueva tecnología"
      responses:
        '200':
          description: Producto actualizado exitosamente
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        '404':
          description: Producto no encontrado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /products/products/delete/{id}:
    put:
      tags:
        - Products
      summary: Eliminar producto con descripción
      description: |
        Marca un producto como eliminado junto con su descripción de forma atómica (soft delete).
        Esta operación garantiza que tanto el producto como su descripción se marcan como eliminados
        correctamente o ninguno se modifica en caso de error (transacción de base de datos).
      parameters:
        - name: id
          in: path
          required: true
          description: ID del producto
          schema:
            type: string
            example: "prod_123"
      responses:
        '200':
          description: Producto eliminado exitosamente
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '404':
          description: Producto no encontrado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  # Product Description Endpoints
  /product_description/{product_id}:
    post:
      tags:
        - Product Descriptions
      summary: Crear descripción de producto
      description: Añade una nueva descripción para un producto
      parameters:
        - name: product_id
          in: path
          required: true
          description: ID del producto
          schema:
            type: string
            example: "prod_123"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductDescription'
      responses:
        '201':
          description: Descripción creada exitosamente
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductDescription'

  /product_description/{id}:
    get:
      tags:
        - Product Descriptions
      summary: Obtener descripción por ID
      description: Recupera los detalles de una descripción específica
      parameters:
        - name: id
          in: path
          required: true
          description: ID de la descripción
          schema:
            type: integer
            example: 1
      responses:
        '200':
          description: Detalles de la descripción
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductDescription'

    put:
      tags:
        - Product Descriptions
      summary: Actualizar descripción
      description: Actualiza una descripción existente
      parameters:
        - name: id
          in: path
          required: true
          description: ID de la descripción
          schema:
            type: integer
            example: 1
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductDescription'
      responses:
        '200':
          description: Descripción actualizada exitosamente
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductDescription'

  # Product Price Endpoints
  /product_price/product_id/{product_id}:
    post:
      tags:
        - Product Prices
      summary: Crear precio de producto
      description: Establece el precio para un producto
      parameters:
        - name: product_id
          in: path
          required: true
          description: ID del producto
          schema:
            type: string
            example: "prod_123"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductPrice'
      responses:
        '201':
          description: Precio creado exitosamente
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductPrice'

    get:
      tags:
        - Product Prices
      summary: Obtener precio por ID de producto
      description: Recupera el precio actual de un producto
      parameters:
        - name: product_id
          in: path
          required: true
          description: ID del producto
          schema:
            type: string
            example: "prod_123"
      responses:
        '200':
          description: Precio del producto
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductPrice'

    put:
      tags:
        - Product Prices
      summary: Actualizar precio por ID de producto
      description: Actualiza el precio de un producto
      parameters:
        - name: product_id
          in: path
          required: true
          description: ID del producto
          schema:
            type: string
            example: "prod_123"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductPrice'
      responses:
        '200':
          description: Precio actualizado exitosamente
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductPrice'

  /product_price/{id}:
    get:
      tags:
        - Product Prices
      summary: Obtener precio por ID
      description: Recupera un precio específico por su ID
      parameters:
        - name: id
          in: path
          required: true
          description: ID del precio
          schema:
            type: integer
            example: 1
      responses:
        '200':
          description: Detalles del precio
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductPrice'

  /product_price/id/{id}:
    put:
      tags:
        - Product Prices
      summary: Actualizar precio por ID
      description: Actualiza un precio específico por su ID
      parameters:
        - name: id
          in: path
          required: true
          description: ID del precio
          schema:
            type: integer
            example: 1
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductPrice'
      responses:
        '200':
          description: Precio actualizado exitosamente
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductPrice'

  # Stock Endpoints
  /stock/{product_id}:
    post:
      tags:
        - Stock
      summary: Crear registro de stock
      description: Crea un nuevo registro de stock para un producto
      parameters:
        - name: product_id
          in: path
          required: true
          description: ID del producto
          schema:
            type: string
            example: "prod_123"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Stock'
      responses:
        '201':
          description: Stock creado exitosamente
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Stock'

  /stock/{id}:
    get:
      tags:
        - Stock
      summary: Obtener stock por ID
      description: Recupera información de stock por ID
      parameters:
        - name: id
          in: path
          required: true
          description: ID del stock
          schema:
            type: integer
            example: 1
      responses:
        '200':
          description: Información del stock
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Stock'

    put:
      tags:
        - Stock
      summary: Actualizar stock por ID
      description: Actualiza información de stock
      parameters:
        - name: id
          in: path
          required: true
          description: ID del stock
          schema:
            type: integer
            example: 1
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Stock'
      responses:
        '200':
          description: Stock actualizado exitosamente
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Stock'

  /stock/product_id/{product_id}:
    get:
      tags:
        - Stock
      summary: Obtener stock por ID de producto
      description: Recupera información de stock de un producto específico
      parameters:
        - name: product_id
          in: path
          required: true
          description: ID del producto
          schema:
            type: string
            example: "prod_123"
      responses:
        '200':
          description: Stock del producto
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Stock'

    put:
      tags:
        - Stock
      summary: Actualizar stock por ID de producto
      description: Actualiza el stock de un producto específico
      parameters:
        - name: product_id
          in: path
          required: true
          description: ID del producto
          schema:
            type: string
            example: "prod_123"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Stock'
      responses:
        '200':
          description: Stock actualizado exitosamente
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Stock'

  # Inventory Endpoints
  /inventory/:
    post:
      tags:
        - Inventory
      summary: Crear inventario
      description: Crea un nuevo inventario
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Inventory'
      responses:
        '201':
          description: Inventario creado exitosamente
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Inventory'

  /inventory/{id}:
    get:
      tags:
        - Inventory
      summary: Obtener inventario con items
      description: Recupera un inventario específico con todos sus items
      parameters:
        - name: id
          in: path
          required: true
          description: ID del inventario
          schema:
            type: string
            example: "inv_123"
      responses:
        '200':
          description: Detalles del inventario
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Inventory'

    put:
      tags:
        - Inventory
      summary: Invalidar inventario
      description: Marca un inventario como inválido
      parameters:
        - name: id
          in: path
          required: true
          description: ID del inventario
          schema:
            type: string
            example: "inv_123"
      responses:
        '200':
          description: Inventario invalidado exitosamente
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'

  /inventory/{page}/{pageSize}:
    get:
      tags:
        - Inventory
      summary: Obtener inventarios paginados
      description: Recupera una lista paginada de inventarios
      parameters:
        - name: page
          in: path
          required: true
          description: Número de página
          schema:
            type: integer
            minimum: 1
            example: 1
        - name: pageSize
          in: path
          required: true
          description: Cantidad de elementos por página
          schema:
            type: integer
            minimum: 1
            maximum: 100
            example: 10
      responses:
        '200':
          description: Lista paginada de inventarios
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedResponse'

  # Manual Adjustment Endpoints
  /manual_adjustment/:
    post:
      tags:
        - Manual Adjustments
      summary: Crear ajuste manual
      description: Crea un nuevo ajuste manual de inventario
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ManualAdjustment'
      responses:
        '201':
          description: Ajuste manual creado exitosamente
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ManualAdjustment'

  /manual_adjustment/{page}/{pageSize}:
    get:
      tags:
        - Manual Adjustments
      summary: Obtener ajustes manuales paginados
      description: Recupera una lista paginada de ajustes manuales
      parameters:
        - name: page
          in: path
          required: true
          description: Número de página
          schema:
            type: integer
            minimum: 1
            example: 1
        - name: pageSize
          in: path
          required: true
          description: Cantidad de elementos por página
          schema:
            type: integer
            minimum: 1
            maximum: 100
            example: 10
      responses:
        '200':
          description: Lista paginada de ajustes manuales
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedResponse'

  # Supplier Endpoints
  /supplier/:
    post:
      tags:
        - Suppliers
      summary: Crear proveedor
      description: Crea un nuevo proveedor
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Supplier'
      responses:
        '201':
          description: Proveedor creado exitosamente
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Supplier'

  /supplier/{id}:
    get:
      tags:
        - Suppliers
      summary: Obtener proveedor por ID
      description: Recupera los detalles de un proveedor específico
      parameters:
        - name: id
          in: path
          required: true
          description: ID del proveedor
          schema:
            type: string
            example: "supplier_123"
      responses:
        '200':
          description: Detalles del proveedor
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Supplier'

    put:
      tags:
        - Suppliers
      summary: Actualizar proveedor
      description: Actualiza los detalles de un proveedor existente
      parameters:
        - name: id
          in: path
          required: true
          description: ID del proveedor
          schema:
            type: string
            example: "supplier_123"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Supplier'
      responses:
        '200':
          description: Proveedor actualizado exitosamente
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Supplier'

  /supplier/name/{name}:
    get:
      tags:
        - Suppliers
      summary: Buscar proveedor por nombre
      description: Busca proveedores que coincidan con el nombre especificado
      parameters:
        - name: name
          in: path
          required: true
          description: Nombre del proveedor a buscar
          schema:
            type: string
            example: "Tech Supplies"
      responses:
        '200':
          description: Lista de proveedores encontrados
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Supplier'

  /supplier/{page}/{pageSize}:
    get:
      tags:
        - Suppliers
      summary: Obtener proveedores paginados
      description: Recupera una lista paginada de proveedores
      parameters:
        - name: page
          in: path
          required: true
          description: Número de página
          schema:
            type: integer
            minimum: 1
            example: 1
        - name: pageSize
          in: path
          required: true
          description: Cantidad de elementos por página
          schema:
            type: integer
            minimum: 1
            maximum: 100
            example: 10
      responses:
        '200':
          description: Lista paginada de proveedores
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedResponse'

  /supplier/delete/{id}:
    put:
      tags:
        - Suppliers
      summary: Eliminar proveedor
      description: Marca un proveedor como eliminado (soft delete)
      parameters:
        - name: id
          in: path
          required: true
          description: ID del proveedor
          schema:
            type: string
            example: "supplier_123"
      responses:
        '200':
          description: Proveedor eliminado exitosamente
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'

  # Client Endpoints
  /client/:
    post:
      tags:
        - Clients
      summary: Crear cliente
      description: Crea un nuevo cliente
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Client'
      responses:
        '201':
          description: Cliente creado exitosamente
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Client'

  /client/{id}:
    get:
      tags:
        - Clients
      summary: Obtener cliente por ID
      description: Recupera los detalles de un cliente específico
      parameters:
        - name: id
          in: path
          required: true
          description: ID del cliente
          schema:
            type: string
            example: "client_123"
      responses:
        '200':
          description: Detalles del cliente
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Client'

    put:
      tags:
        - Clients
      summary: Actualizar cliente
      description: Actualiza los detalles de un cliente existente
      parameters:
        - name: id
          in: path
          required: true
          description: ID del cliente
          schema:
            type: string
            example: "client_123"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Client'
      responses:
        '200':
          description: Cliente actualizado exitosamente
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Client'

  /client/name/{name}:
    get:
      tags:
        - Clients
      summary: Buscar cliente por nombre
      description: Busca clientes que coincidan con el nombre especificado
      parameters:
        - name: name
          in: path
          required: true
          description: Nombre del cliente a buscar
          schema:
            type: string
            example: "María"
      responses:
        '200':
          description: Lista de clientes encontrados
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Client'

  /client/{page}/{pageSize}:
    get:
      tags:
        - Clients
      summary: Obtener clientes paginados
      description: Recupera una lista paginada de clientes
      parameters:
        - name: page
          in: path
          required: true
          description: Número de página
          schema:
            type: integer
            minimum: 1
            example: 1
        - name: pageSize
          in: path
          required: true
          description: Cantidad de elementos por página
          schema:
            type: integer
            minimum: 1
            maximum: 100
            example: 10
      responses:
        '200':
          description: Lista paginada de clientes
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedResponse'

  /client/delete/{id}:
    put:
      tags:
        - Clients
      summary: Eliminar cliente
      description: Marca un cliente como eliminado (soft delete)
      parameters:
        - name: id
          in: path
          required: true
          description: ID del cliente
          schema:
            type: string
            example: "client_123"
      responses:
        '200':
          description: Cliente eliminado exitosamente
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'

  # Tax Rate Endpoints
  /tax_rate/:
    post:
      tags:
        - Tax Rates
      summary: Crear tasa de impuesto
      description: Crea una nueva tasa de impuesto
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TaxRate'
      responses:
        '201':
          description: Tasa de impuesto creada exitosamente
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaxRate'

  /tax_rate/{id}:
    get:
      tags:
        - Tax Rates
      summary: Obtener tasa de impuesto por ID
      description: Recupera los detalles de una tasa de impuesto específica
      parameters:
        - name: id
          in: path
          required: true
          description: ID de la tasa de impuesto
          schema:
            type: integer
            example: 1
      responses:
        '200':
          description: Detalles de la tasa de impuesto
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaxRate'

    put:
      tags:
        - Tax Rates
      summary: Actualizar tasa de impuesto
      description: Actualiza los detalles de una tasa de impuesto existente
      parameters:
        - name: id
          in: path
          required: true
          description: ID de la tasa de impuesto
          schema:
            type: integer
            example: 1
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TaxRate'
      responses:
        '200':
          description: Tasa de impuesto actualizada exitosamente
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaxRate'

  /tax_rate/name/{name}:
    get:
      tags:
        - Tax Rates
      summary: Buscar tasa de impuesto por nombre
      description: Busca tasas de impuesto que coincidan con el nombre especificado
      parameters:
        - name: name
          in: path
          required: true
          description: Nombre de la tasa de impuesto a buscar
          schema:
            type: string
            example: "IVA"
      responses:
        '200':
          description: Lista de tasas de impuesto encontradas
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TaxRate'

  /tax_rate/{page}/{pageSize}:
    get:
      tags:
        - Tax Rates
      summary: Obtener tasas de impuesto paginadas
      description: Recupera una lista paginada de tasas de impuesto
      parameters:
        - name: page
          in: path
          required: true
          description: Número de página
          schema:
            type: integer
            minimum: 1
            example: 1
        - name: pageSize
          in: path
          required: true
          description: Cantidad de elementos por página
          schema:
            type: integer
            minimum: 1
            maximum: 100
            example: 10
      responses:
        '200':
          description: Lista paginada de tasas de impuesto
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedResponse'

  # Purchase Endpoints
  /purchase/:
    post:
      tags:
        - Purchases
      summary: Crear compra
      description: Registra una nueva compra
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Purchase'
      responses:
        '201':
          description: Compra registrada exitosamente
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Purchase'

  /purchase/cancel/{id}:
    put:
      tags:
        - Purchases
      summary: Cancelar compra
      description: Cancela una compra existente
      parameters:
        - name: id
          in: path
          required: true
          description: ID de la compra
          schema:
            type: string
            example: "purchase_123"
      responses:
        '200':
          description: Compra cancelada exitosamente
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'

  /purchase/{id}:
    get:
      tags:
        - Purchases
      summary: Obtener compra por ID
      description: Recupera los detalles de una compra específica
      parameters:
        - name: id
          in: path
          required: true
          description: ID de la compra
          schema:
            type: string
            example: "purchase_123"
      responses:
        '200':
          description: Detalles de la compra
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Purchase'

  /purchase/supplier_id/{supplier_id}:
    get:
      tags:
        - Purchases
      summary: Obtener compras por ID de proveedor
      description: Recupera todas las compras de un proveedor específico
      parameters:
        - name: supplier_id
          in: path
          required: true
          description: ID del proveedor
          schema:
            type: string
            example: "supplier_123"
      responses:
        '200':
          description: Lista de compras del proveedor
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Purchase'

  /purchase/supplier_name/{name}:
    get:
      tags:
        - Purchases
      summary: Obtener compras por nombre de proveedor
      description: Recupera todas las compras de un proveedor por su nombre
      parameters:
        - name: name
          in: path
          required: true
          description: Nombre del proveedor
          schema:
            type: string
            example: "Tech Supplies"
      responses:
        '200':
          description: Lista de compras del proveedor
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Purchase'

  /purchase/date_range/:
    get:
      tags:
        - Purchases
      summary: Obtener compras por rango de fechas
      description: Recupera compras dentro de un rango de fechas específico
      parameters:
        - name: start_date
          in: query
          required: true
          description: Fecha de inicio (formato YYYY-MM-DD)
          schema:
            type: string
            format: date
            example: "2024-01-01"
        - name: end_date
          in: query
          required: true
          description: Fecha de fin (formato YYYY-MM-DD)
          schema:
            type: string
            format: date
            example: "2024-01-31"
      responses:
        '200':
          description: Lista de compras en el rango de fechas
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Purchase'

  # Sale Endpoints
  /sale/:
    post:
      tags:
        - Sales
      summary: Crear venta
      description: Registra una nueva venta
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Sale'
      responses:
        '201':
          description: Venta registrada exitosamente
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Sale'

  /sale/{id}:
    get:
      tags:
        - Sales
      summary: Obtener venta por ID
      description: Recupera los detalles de una venta específica
      parameters:
        - name: id
          in: path
          required: true
          description: ID de la venta
          schema:
            type: string
            example: "sale_123"
      responses:
        '200':
          description: Detalles de la venta
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Sale'

    put:
      tags:
        - Sales
      summary: Cancelar venta
      description: Cancela una venta existente
      parameters:
        - name: id
          in: path
          required: true
          description: ID de la venta
          schema:
            type: string
            example: "sale_123"
      responses:
        '200':
          description: Venta cancelada exitosamente
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'

  /sale/client_id/{client_id}:
    get:
      tags:
        - Sales
      summary: Obtener ventas por ID de cliente
      description: Recupera todas las ventas de un cliente específico
      parameters:
        - name: client_id
          in: path
          required: true
          description: ID del cliente
          schema:
            type: string
            example: "client_123"
      responses:
        '200':
          description: Lista de ventas del cliente
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Sale'

  /sale/client_name/{name}:
    get:
      tags:
        - Sales
      summary: Obtener ventas por nombre de cliente
      description: Recupera todas las ventas de un cliente por su nombre
      parameters:
        - name: name
          in: path
          required: true
          description: Nombre del cliente
          schema:
            type: string
            example: "María"
      responses:
        '200':
          description: Lista de ventas del cliente
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Sale'

  /sale/date_range/:
    get:
      tags:
        - Sales
      summary: Obtener ventas por rango de fechas
      description: Recupera ventas dentro de un rango de fechas específico
      parameters:
        - name: start_date
          in: query
          required: true
          description: Fecha de inicio (formato YYYY-MM-DD)
          schema:
            type: string
            format: date
            example: "2024-01-01"
        - name: end_date
          in: query
          required: true
          description: Fecha de fin (formato YYYY-MM-DD)
          schema:
            type: string
            format: date
            example: "2024-01-31"
      responses:
        '200':
          description: Lista de ventas en el rango de fechas
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Sale'

  # Schedule Endpoints
  /schedules/{id}:
    get:
      tags:
        - Schedules
      summary: Obtener programación por ID
      description: Recupera los detalles de una programación específica
      parameters:
        - name: id
          in: path
          required: true
          description: ID de la programación
          schema:
            type: string
            example: "schedule_123"
      responses:
        '200':
          description: Detalles de la programación
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Schedule'

  /schedules/product/{productId}/date/{date}/available:
    get:
      tags:
        - Schedules
      summary: Obtener programaciones disponibles
      description: Recupera las programaciones disponibles para un producto en una fecha específica
      parameters:
        - name: productId
          in: path
          required: true
          description: ID del producto
          schema:
            type: string
            example: "prod_123"
        - name: date
          in: path
          required: true
          description: Fecha de la programación (formato YYYY-MM-DD)
          schema:
            type: string
            format: date
            example: "2024-01-15"
      responses:
        '200':
          description: Lista de programaciones disponibles
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Schedule'

  /schedules/generate/daily:
    post:
      tags:
        - Schedules
      summary: Generar programaciones diarias
      description: Genera automáticamente las programaciones para el día actual
      responses:
        '200':
          description: Programaciones diarias generadas exitosamente
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'

  /schedules/generate/date:
    post:
      tags:
        - Schedules
      summary: Generar programaciones para fecha específica
      description: Genera programaciones para una fecha específica
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                date:
                  type: string
                  format: date
                  example: "2024-01-15"
                  description: Fecha para generar programaciones
              required:
                - date
      responses:
        '200':
          description: Programaciones generadas exitosamente para la fecha especificada
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'

  /schedules/generate/next-days:
    post:
      tags:
        - Schedules
      summary: Generar programaciones para próximos N días
      description: Genera programaciones para los próximos N días
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                days:
                  type: integer
                  minimum: 1
                  maximum: 365
                  example: 7
                  description: Número de días hacia adelante para generar programaciones
              required:
                - days
      responses:
        '200':
          description: Programaciones generadas exitosamente para los próximos días
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'

tags:
  - name: Home
    description: Endpoint básico de bienvenida
  - name: Authentication
    description: Endpoints de autenticación y autorización
  - name: Categories
    description: Gestión de categorías de productos
  - name: Products
    description: Gestión de productos
  - name: Product Descriptions
    description: Gestión de descripciones de productos
  - name: Product Prices
    description: Gestión de precios de productos
  - name: Stock
    description: Gestión de stock e inventario
  - name: Inventory
    description: Gestión de inventarios
  - name: Manual Adjustments
    description: Ajustes manuales de inventario
  - name: Suppliers
    description: Gestión de proveedores
  - name: Clients
    description: Gestión de clientes
  - name: Tax Rates
    description: Gestión de tasas de impuestos
  - name: Purchases
    description: Gestión de compras
  - name: Sales
    description: Gestión de ventas
  - name: Schedules
    description: Sistema de programación automática
