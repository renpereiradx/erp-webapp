openapi: 3.0.3
info:
  title: Business Management API
  description: |
    API para sistema de gesti√≥n empresarial que incluye manejo de productos, inventarios, ventas, compras, clientes, proveedores y programaci√≥n autom√°tica.
    
    ## üÜï Nuevas Funcionalidades v2.0
    - ‚úÖ **Cantidades Decimales**: Soporte completo para cantidades como 2.5 kg, 1.75 litros
    - ‚úÖ **Precios por Unidad**: M√∫ltiples unidades por producto (kg, caja, litro, etc.)
    - ‚úÖ **Ventas con Unidades**: Endpoint `/sale/with-units` para ventas con cantidades decimales
    - ‚úÖ **Productos por Categor√≠a**: Endpoint `/products/by-category` con informaci√≥n de precios
    - ‚úÖ **Gesti√≥n de Unidades**: Endpoints para crear y consultar precios por unidad
    
    ## Caracter√≠sticas principales:
    - Gesti√≥n de productos, categor√≠as y precios (con soporte decimal)
    - Control de inventarios y stock (cantidades decimales)
    - Administraci√≥n de clientes y proveedores
    - Registro de ventas y compras (con unidades espec√≠ficas)
    - Sistema de programaci√≥n autom√°tica
    - Autenticaci√≥n JWT
    
    ## Casos de uso principales:
    - **Productos de peso**: Verduras, frutas, carnes con kg, cajas, etc.
    - **Productos regulares**: Funcionamiento normal sin unidades espec√≠ficas
    - **Ventas mixtas**: Combinaci√≥n de productos con y sin unidades
    
    ## Autenticaci√≥n
    La mayor√≠a de endpoints requieren autenticaci√≥n mediante JWT token en el header Authorization.
  version: "2.0.0"
  contact:
    name: Business Management API
    email: support@businessmanagement.com
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT

servers:
  - url: http://localhost:5050
    description: Servidor de desarrollo
  - url: https://api.businessmanagement.com
    description: Servidor de producci√≥n

security:
  - BearerAuth: []

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: "Agregar 'Bearer ' seguido del token JWT"

  schemas:
    # Authentication Models
    SignUpLoginRequest:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          format: email
          example: "myemail"
        password:
          type: string
          format: password
          minLength: 6
          example: "mypassword"

    LoginResponse:
      type: object
      properties:
        token:
          type: string
          example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
        role_id:
          type: string
          example: "admin"

    # User Models
    User:
      type: object
      properties:
        id:
          type: string
          example: "user_123"
        first_name:
          type: string
          example: "Juan"
        last_name:
          type: string
          example: "P√©rez"
        email:
          type: string
          format: email
          example: "juan.perez@ejemplo.com"
        password:
          type: string
          format: password
        status:
          type: string
          example: "active"

    # Category Models
    Category:
      type: object
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: "Electr√≥nicos"
        description:
          type: string
          example: "Productos electr√≥nicos y tecnol√≥gicos"

    # Product Models
    Product:
      type: object
      properties:
        id:
          type: string
          example: "bcYdWdKNR"
        name:
          type: string
          example: "Puma MB.01"
        state:
          type: boolean
          example: true
        category:
          $ref: '#/components/schemas/Category'
      required:
        - name
        - id_category

    ProductDetails:
      type: object
      description: Producto con todos sus detalles relacionados en una sola respuesta
      properties:
        id:
          type: string
          description: ID √∫nico del producto
          example: "GA4w4YlYpVP1LNji17o9FKbp8Dg"
        name:
          type: string
          description: Nombre del producto
          example: "Onion - Dried"
        state:
          type: boolean
          description: Estado del producto (activo/inactivo)
          example: true
        category_id:
          type: integer
          description: ID de la categor√≠a
          example: 9
        user_id:
          type: string
          description: ID del usuario que cre√≥ el producto
          example: "2prrJIgRvgaFVbuu49ua9QJVu8n"
        product_type:
          type: string
          enum: [PHYSICAL, SERVICE]
          description: Tipo de producto
          example: "PHYSICAL"
        category:
          $ref: '#/components/schemas/Category'
          description: Informaci√≥n completa de la categor√≠a
        stock:
          $ref: '#/components/schemas/StockDetails'
          description: Stock actual del producto (null si no tiene)
        price:
          $ref: '#/components/schemas/PriceDetails'
          description: Precio actual del producto (null si no tiene)
        description:
          $ref: '#/components/schemas/DescriptionDetails'
          description: Descripci√≥n del producto (null si no tiene)
      required:
        - id
        - name
        - state
        - category_id
        - user_id
        - product_type

    StockDetails:
      type: object
      description: Detalles del stock de un producto
      properties:
        id:
          type: integer
          description: ID del registro de stock
          example: 110
        quantity:
          type: integer
          description: Cantidad en stock
          example: 7
        effective_date:
          type: string
          format: date-time
          description: Fecha de efectividad del stock
          example: "2025-06-03T14:33:52.613475Z"
        metadata:
          type: object
          description: Metadatos adicionales del stock
          additionalProperties: true
          example:
            type: "stock_adjustment"
            po_id: 9
            action: "cancel_po_return"

    PriceDetails:
      type: object
      description: Detalles del precio de un producto
      properties:
        id:
          type: integer
          description: ID del registro de precio
          example: 54
        purchase_price:
          type: number
          format: float
          description: Precio de compra
          example: 320000.00
        effective_date:
          type: string
          format: date-time
          description: Fecha de efectividad del precio
          example: "2025-05-26T17:39:41.446265Z"
        metadata:
          type: object
          description: Metadatos adicionales del precio
          additionalProperties: true
          example:
            po_id: 9
            source: "purchase_order_cancellation"

    DescriptionDetails:
      type: object
      description: Detalles de la descripci√≥n de un producto
      properties:
        id:
          type: integer
          description: ID del registro de descripci√≥n
          example: 15
        description:
          type: string
          description: Descripci√≥n del producto
          example: "Cebolla deshidratada premium para uso culinario"
        effective_date:
          type: string
          format: date-time
          description: Fecha de efectividad de la descripci√≥n
          example: "2025-01-15T10:30:00Z"

    ProductRequest:
      type: object
      properties:
        name:
          type: string
          example: "Nike Air Max 90 PRO"
        id_category:
          type: integer
          example: 5
        state:
          type: boolean
          example: true
        product_type:
          type: string
          enum: ["PHYSICAL", "SERVICE"]
          example: "PHYSICAL"
          description: "Tipo de producto - PHYSICAL para productos f√≠sicos, SERVICE para servicios"
        description:
          type: string
          example: "Zapatillas deportivas de alta calidad con tecnolog√≠a Air Max para m√°ximo confort"
      required:
        - name
        - id_category
        - description

    ProductDescription:
      type: object
      properties:
        id:
          type: integer
          example: 8
        product_id:
          type: string
          example: "bcYdWdKNR"
        description:
          type: string
          example: "nullam sit amet turpis elementum ligula vehicula consequat morbi a ipsum integer a."
        effective_date:
          type: string
          format: date-time
          example: "2024-01-15T10:30:00Z"
        id_user:
          type: string
          example: "2pmK5NPfHiRwZUkcd3d3cETC2JW"

    ProductWithDescriptionResponse:
      type: object
      description: Respuesta optimizada con producto y descripci√≥n
      properties:
        id:
          type: string
          description: ID √∫nico del producto
          example: "GA4w4YlYpVP1LNji17o9FKbp8Dg"
        name:
          type: string
          description: Nombre del producto
          example: "Onion - Dried"
        state:
          type: boolean
          description: Estado del producto (activo/inactivo)
          example: true
        product_type:
          type: string
          enum: ["PHYSICAL", "SERVICE"]
          description: Tipo de producto
          example: "PHYSICAL"
        category:
          type: object
          description: Informaci√≥n de la categor√≠a
          properties:
            id:
              type: integer
              example: 9
            name:
              type: string
              example: "Baby"
            description:
              type: string
              example: "Lorem ipsum dolor sit amet, consectetur adipiscing elit."
        description:
          type: object
          description: Descripci√≥n del producto
          properties:
            id:
              type: integer
              description: ID de la descripci√≥n
              example: 15
            description:
              type: string
              description: Texto de la descripci√≥n
              example: "Cebolla deshidratada de alta calidad para uso culinario"
            effective_date:
              type: string
              format: date-time
              description: Fecha de efectividad de la descripci√≥n
              example: "2025-01-15T10:30:00Z"
            user_id:
              type: string
              description: ID del usuario que cre√≥ la descripci√≥n
              example: "2pmK5NPfHiRwZUkcd3d3cETC2JW"

    ProductEnriched:
      type: object
      description: Producto enriquecido con informaci√≥n completa de stock, precios y descripci√≥n
      properties:
        id:
          type: string
          description: ID √∫nico del producto
          example: "GA4w4YlYpVP1LNji17o9FKbp8Dg"
        name:
          type: string
          description: Nombre del producto
          example: "Pelota de F√∫tbol"
        state:
          type: boolean
          description: Estado del producto (activo/inactivo)
          example: true
        category:
          $ref: '#/components/schemas/Category'
        category_id:
          type: integer
          nullable: true
          description: ID de la categor√≠a
          example: 1
        category_name:
          type: string
          nullable: true
          description: Nombre de la categor√≠a
          example: "Deportes"
        product_type:
          type: string
          description: Tipo de producto
          enum: ["PHYSICAL", "SERVICE"]
          example: "PHYSICAL"
        user_id:
          type: string
          nullable: true
          description: ID del usuario que cre√≥ el producto
          example: "user123"
        # Informaci√≥n de precios
        price_id:
          type: integer
          nullable: true
          description: ID del registro de precio
          example: 15
        purchase_price:
          type: number
          format: float
          nullable: true
          description: Precio de compra del producto
          example: 25.99
        price_updated_at:
          type: string
          format: date-time
          nullable: true
          description: Fecha de √∫ltima actualizaci√≥n del precio
          example: "2025-07-24T10:30:00Z"
        price_updated_by:
          type: string
          nullable: true
          description: Usuario que actualiz√≥ el precio por √∫ltima vez
          example: "user123"
        # Informaci√≥n de stock
        stock_id:
          type: integer
          nullable: true
          description: ID del registro de stock
          example: 42
        stock_quantity:
          type: integer
          nullable: true
          description: Cantidad actual en stock
          example: 15
        stock_updated_at:
          type: string
          format: date-time
          nullable: true
          description: Fecha de √∫ltima actualizaci√≥n del stock
          example: "2025-07-24T09:15:00Z"
        stock_updated_by:
          type: string
          nullable: true
          description: Usuario que actualiz√≥ el stock por √∫ltima vez
          example: "user123"
        # Informaci√≥n de descripci√≥n
        description_id:
          type: integer
          nullable: true
          description: ID del registro de descripci√≥n
          example: 8
        description:
          type: string
          nullable: true
          description: Descripci√≥n del producto
          example: "Pelota de f√∫tbol oficial FIFA, tama√±o reglamentario"
        # Campos calculados
        stock_status:
          type: string
          description: Estado calculado del stock
          enum: ["out_of_stock", "low_stock", "medium_stock", "in_stock"]
          example: "medium_stock"
        price_formatted:
          type: string
          description: Precio formateado como moneda
          example: "$25.99"
        has_valid_stock:
          type: boolean
          description: Indica si el producto tiene informaci√≥n v√°lida de stock
          example: true
        has_valid_price:
          type: boolean
          description: Indica si el producto tiene informaci√≥n v√°lida de precio
          example: true
      required:
        - id
        - name
        - state
        - product_type
        - stock_status
        - price_formatted
        - has_valid_stock
        - has_valid_price

    ProductDescriptionRequest:
      type: object
      properties:
        description:
          type: string
          example: "Lorem ipsun new generated."
      required:
        - description

    ProductPrice:
      type: object
      properties:
        id:
          type: integer
          example: 53
        product_id:
          type: string
          example: "bcYdWdKNR"
        cost_price:
          type: number
          format: float
          example: 1250000.00
        sale_price:
          type: number
          format: float
          example: 1500000.00
        tax:
          type: number
          format: float
          example: 30.00
        last_updated_by:
          type: string
          example: "2pmK5NPfHiRwZUkcd3d3cETC2JW"
        created_at:
          type: string
          format: date-time
          example: "2024-01-15T10:30:00Z"
        updated_at:
          type: string
          format: date-time
          example: "2024-01-15T10:30:00Z"
        metadata:
          type: object
          example: {"currency": "COP", "tax_included": false}

    ProductPriceRequest:
      type: object
      properties:
        cost_price:
          type: number
          format: float
          example: 1250000.00
        sale_price:
          type: number
          format: float
          example: 1500000.00
        tax:
          type: number
          format: float
          example: 30.00
      required:
        - cost_price

    # Client Models
    Client:
      type: object
      properties:
        id:
          type: string
          example: "client_123"
        name:
          type: string
          example: "Mar√≠a"
        last_name:
          type: string
          example: "Gonz√°lez"
        document_id:
          type: string
          example: "12345678"
        status:
          type: boolean
          example: true
        user_id:
          type: string
          example: "user_123"
        created_at:
          type: string
          format: date-time
          example: "2024-01-15T10:30:00Z"
        contact:
          type: string
          example: "+1234567890"

    # Supplier Models
    Supplier:
      type: object
      properties:
        id:
          type: string
          example: "supplier_123"
        name:
          type: string
          example: "Tech Supplies Inc."
        contact:
          type: string
          example: "contact@techsupplies.com"
        address:
          type: string
          example: "123 Business St, City"
        status:
          type: boolean
          example: true

    # Stock Models
    Stock:
      type: object
      properties:
        id:
          type: integer
          example: 2
        product_id:
          type: string
          example: "bcYdWdKNR"
        quantity:
          type: number
          format: float
          example: 25.5
          description: "Cantidad en stock (soporta decimales para productos de peso)"
        exp:
          type: string
          format: date
          example: "2055-02-26"
        entity:
          type: object
          properties:
            name:
              type: string
              example: "POSTMAN"
        min_stock:
          type: integer
          example: 10
        max_stock:
          type: integer
          example: 100

    StockRequest:
      type: object
      properties:
        quantity:
          type: number
          format: float
          example: 16.5
          description: "Cantidad de stock (soporta decimales: 2.5 kg, 1.75 litros, etc.)"
        exp:
          type: string
          format: date
          example: "2040-08-26"
        entity:
          type: object
          properties:
            name:
              type: string
              example: "POSTMAN"
      required:
        - quantity

    # Inventory Models
    Inventory:
      type: object
      properties:
        id:
          type: string
          example: "17"
        date:
          type: string
          format: date-time
          example: "2024-01-15T10:30:00Z"
        status:
          type: string
          example: "active"
        user_id:
          type: string
          example: "2pmK5NPfHiRwZUkcd3d3cETC2JW"

    InventoryRequest:
      type: array
      items:
        type: object
        properties:
          product_id:
            type: string
            example: "IFQ12rtRfwl37D6r17j4QajgzRM"
          quantity_checked:
            type: integer
            example: 22
        required:
          - product_id
          - quantity_checked
      example:
        - product_id: "IFQ12rtRfwl37D6r17j4QajgzRM"
          quantity_checked: 22
        - product_id: "BXLH1gKpokq6eHBc24m14gq9Dco"
          quantity_checked: 11
        - product_id: "oPfF1ThrpC34mArR38d2EusgsJL"
          quantity_checked: 8
        - product_id: "eM6T4lJ3jLH1QMSh84j4byvdP5s"
          quantity_checked: 75

    # Purchase Models
    Purchase:
      type: object
      properties:
        id:
          type: string
          example: "purchase_123"
        supplier_id:
          type: string
          example: "supplier_123"
        total_amount:
          type: number
          format: float
          example: 1500.00
        purchase_date:
          type: string
          format: date-time
          example: "2024-01-15T10:30:00Z"
        status:
          type: string
          example: "completed"

    # Sale Models
    Sale:
      type: object
      properties:
        id:
          type: string
          example: "sale_123"
        client_id:
          type: string
          example: "client_123"
        total_amount:
          type: number
          format: float
          example: 299.99
        sale_date:
          type: string
          format: date-time
          example: "2024-01-15T10:30:00Z"
        status:
          type: string
          example: "completed"

    # Tax Rate Models
    TaxRate:
      type: object
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: "IVA"
        rate:
          type: number
          format: float
          example: 0.16
        description:
          type: string
          example: "Impuesto al Valor Agregado"

    # Schedule Models
    Schedule:
      type: object
      properties:
        id:
          type: string
          example: "schedule_123"
        product_id:
          type: string
          example: "prod_123"
        scheduled_date:
          type: string
          format: date-time
          example: "2024-01-15T10:30:00Z"
        status:
          type: string
          example: "available"

    # Manual Adjustment Models
    ManualAdjustment:
      type: object
      properties:
        id:
          type: string
          example: "adj_123"
        product_id:
          type: string
          example: "prod_123"
        adjustment_type:
          type: string
          example: "increase"
        quantity:
          type: number
          format: float
          example: 10.5
          description: "Cantidad de ajuste (soporta decimales)"
        reason:
          type: string
          example: "Stock correction"
        created_at:
          type: string
          format: date-time
          example: "2024-01-15T10:30:00Z"

    # Common Response Models
    ErrorResponse:
      type: object
      properties:
        error:
          type: string
          example: "Error message description"
        code:
          type: integer
          example: 400

    SuccessResponse:
      type: object
      properties:
        message:
          type: string
          example: "Operation completed successfully"
        data:
          type: object

    PaginatedResponse:
      type: object
      properties:
        data:
          type: array
          items:
            type: object
        page:
          type: integer
          example: 1
        page_size:
          type: integer
          example: 10
        total:
          type: integer
          example: 100

    # Nuevos Modelos para Cantidades Decimales y Precios por Unidad
    UnitPrice:
      type: object
      properties:
        id:
          type: integer
          example: 1
        product_id:
          type: string
          example: "PROD_TOMATE_001"
        unit:
          type: string
          example: "kg"
          description: "Unidad de medida (kg, caja, litro, etc.)"
        price_per_unit:
          type: number
          format: float
          example: 25.50
          description: "Precio por unidad espec√≠fica"
        effective_date:
          type: string
          format: date-time
          example: "2024-01-15T10:30:00Z"

    ProductWithPricing:
      type: object
      properties:
        product_id:
          type: string
          example: "PROD_TOMATE_001"
        product_name:
          type: string
          example: "Tomate Cherry"
        category_name:
          type: string
          example: "Verduras"
        price:
          type: number
          format: float
          example: 25.50
        unit:
          type: string
          example: "kg"
        price_source:
          type: string
          example: "unit_price"
          description: "Fuente del precio: 'unit_price' o 'general_price'"
        has_unit_pricing:
          type: boolean
          example: true

    SaleDetailRequest:
      type: object
      properties:
        product_id:
          type: string
          example: "PROD_TOMATE_001"
        quantity:
          type: number
          format: float
          example: 2.5
          description: "Cantidad (soporta decimales: 2.5 kg, 1.75 litros)"
        unit:
          type: string
          example: "kg"
          description: "Unidad de medida (opcional para productos sin unidades espec√≠ficas)"
      required:
        - product_id
        - quantity

    SaleDetailWithUnit:
      type: object
      properties:
        product_id:
          type: string
          example: "PROD_TOMATE_001"
        product_name:
          type: string
          example: "Tomate Cherry"
        quantity:
          type: number
          format: float
          example: 2.5
        unit:
          type: string
          example: "kg"
        unit_price:
          type: number
          format: float
          example: 25.50
        subtotal:
          type: number
          format: float
          example: 63.75
          description: "quantity * unit_price"

    SaleWithUnitsRequest:
      type: object
      properties:
        client_id:
          type: string
          example: "CLIENT_001"
        details:
          type: array
          items:
            $ref: '#/components/schemas/SaleDetailRequest'
      required:
        - client_id
        - details

    ProductUnitsResponse:
      type: object
      properties:
        product_id:
          type: string
          example: "PROD_TOMATE_001"
        available_units:
          type: array
          items:
            $ref: '#/components/schemas/UnitPrice'

    CreateUnitPriceRequest:
      type: object
      properties:
        unit:
          type: string
          example: "kg"
        price_per_unit:
          type: number
          format: float
          example: 25.50
      required:
        - unit
        - price_per_unit

paths:
  # Authentication Endpoints
  /:
    get:
      tags:
        - Home
      summary: Home endpoint
      description: Endpoint b√°sico de bienvenida
      security: []
      responses:
        '200':
          description: Respuesta exitosa
          content:
            text/plain:
              schema:
                type: string
                example: "Welcome to Business Management API"

  /signup:
    post:
      tags:
        - Authentication
      summary: Registro de usuario
      description: Registra un nuevo usuario en el sistema
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SignUpLoginRequest'
      responses:
        '200':
          description: Usuario registrado exitosamente
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
        '400':
          description: Datos de entrada inv√°lidos
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Error interno del servidor
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /login:
    post:
      tags:
        - Authentication
      summary: Inicio de sesi√≥n
      description: Autentica un usuario y devuelve un token JWT
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SignUpLoginRequest'
      responses:
        '200':
          description: Login exitoso
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
        '400':
          description: Credenciales inv√°lidas
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Error interno del servidor
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  # Category Endpoints
  /categories:
    get:
      tags:
        - Categories
      summary: Obtener todas las categor√≠as
      description: |
        Recupera la lista de todas las categor√≠as disponibles.
        
        **‚úÖ No requiere autenticaci√≥n** - Endpoint p√∫blico para facilitar la integraci√≥n.
      security: []
      responses:
        '200':
          description: Lista de categor√≠as
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Category'
              example:
                - id: 1
                  name: "Electr√≥nicos"
                  description: "Dispositivos electr√≥nicos y gadgets"
                - id: 5
                  name: "Deportes"
                  description: "Art√≠culos deportivos y fitness"
                - id: 9
                  name: "Baby"
                  description: "Productos para beb√©s y ni√±os"
        '500':
          description: Error interno del servidor
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  # Product Endpoints
  /products:
    get:
      tags:
        - Products
      summary: Obtener todos los productos
      description: |
        Obtiene todos los productos disponibles en el sistema con informaci√≥n b√°sica.
        
        **Caracter√≠sticas:**
        - Respuesta r√°pida y liviana
        - Ideal para listas desplegables y selecciones
        - No incluye informaci√≥n detallada de stock o precios
        - Soporte para filtros b√°sicos por categor√≠a
      parameters:
        - name: category
          in: query
          required: false
          description: Filtrar por categor√≠a espec√≠fica
          schema:
            type: string
          example: "Electr√≥nicos"
        - name: active
          in: query
          required: false
          description: Filtrar solo productos activos
          schema:
            type: boolean
            default: true
          example: true
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Lista de productos
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Product'
              example:
                - id: "PROD_001"
                  name: "iPhone 15 Pro"
                  state: true
                  category:
                    id: 1
                    name: "Electr√≥nicos"
                    description: "Dispositivos electr√≥nicos"
                - id: "PROD_002"
                  name: "Laptop Dell XPS"
                  state: true
                  category:
                    id: 1
                    name: "Electr√≥nicos"
                    description: "Dispositivos electr√≥nicos"
        '401':
          description: Token de autenticaci√≥n requerido
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    post:
      tags:
        - Products
      summary: Crear nuevo producto con descripci√≥n
      description: |
        Crea un nuevo producto en el sistema junto con su descripci√≥n inicial de forma at√≥mica.
        Esta operaci√≥n garantiza que tanto el producto como su descripci√≥n se crean correctamente
        o ninguno se crea en caso de error (transacci√≥n de base de datos).
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductRequest'
            example:
              name: "Puma MB.01"
              id_category: 5
              product_type: "PHYSICAL"
              description: "Zapatillas de baloncesto de alta performance dise√±adas por LaMelo Ball"
      responses:
        '201':
          description: Producto creado exitosamente
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        '400':
          description: Datos de entrada inv√°lidos
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /products/{id}:
    get:
      tags:
        - Products
      summary: Obtener producto por ID con informaci√≥n completa
      description: |
        Recupera los detalles completos de un producto espec√≠fico incluyendo:
        - Informaci√≥n b√°sica del producto
        - Stock actual y historial
        - Precios y fechas de actualizaci√≥n
        - Descripci√≥n del producto
        - Campos calculados (estado de stock, precio formateado)
        
        **Ideal para:** Vistas de detalle, edici√≥n de productos
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: ID √∫nico del producto
          schema:
            type: string
            example: "GA4w4YlYpVP1LNji17o9FKbp8Dg"
      responses:
        '200':
          description: Producto obtenido exitosamente
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductEnriched'
              example:
                id: "GA4w4YlYpVP1LNji17o9FKbp8Dg"
                name: "iPhone 15 Pro"
                state: true
                category:
                  id: 1
                  name: "Electr√≥nicos"
                  description: "Dispositivos electr√≥nicos"
                product_type: "PHYSICAL"
                purchase_price: 999.99
                stock_quantity: 25
                description: "Smartphone Apple iPhone 15 Pro 128GB"
                stock_status: "in_stock"
                price_formatted: "$999.99"
                has_valid_stock: true
                has_valid_price: true
        '401':
          description: Token de autenticaci√≥n requerido
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Producto no encontrado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    put:
      tags:
        - Products
      summary: Actualizar producto con descripci√≥n
      description: |
        Actualiza los detalles de un producto existente junto con su descripci√≥n de forma at√≥mica.
        Esta operaci√≥n garantiza que tanto el producto como su descripci√≥n se actualizan correctamente
        o ninguno se modifica en caso de error (transacci√≥n de base de datos).
      parameters:
        - name: id
          in: path
          required: true
          description: ID del producto
          schema:
            type: string
            example: "prod_123"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductRequest'
            example:
              name: "iPhone 15 Pro Updated"
              id_category: 1
              state: true
              product_type: "PHYSICAL"
              description: "Smartphone Apple iPhone 15 Pro con nuevas caracter√≠sticas"
      responses:
        '200':
          description: Producto actualizado exitosamente
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductEnriched'
        '400':
          description: Datos de entrada inv√°lidos
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Producto no encontrado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    delete:
      tags:
        - Products
      summary: Eliminar producto
      description: |
        Marca un producto como eliminado (soft delete).
        Esta operaci√≥n marca el producto como inactivo pero mantiene los datos hist√≥ricos.
      parameters:
        - name: id
          in: path
          required: true
          description: ID del producto
          schema:
            type: string
            example: "prod_123"
      responses:
        '200':
          description: Producto eliminado exitosamente
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
              example:
                message: "Producto eliminado exitosamente"
        '404':
          description: Producto no encontrado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /products/search:
    get:
      tags:
        - Products
      summary: Buscar productos por nombre
      description: |
        Busca productos por nombre y devuelve informaci√≥n enriquecida incluyendo:
        - Stock actual y estado calculado
        - Precios y fechas de actualizaci√≥n
        - Descripci√≥n del producto
        - Informaci√≥n de categor√≠as
        
        **Caracter√≠sticas:**
        - B√∫squeda parcial (ILIKE)
        - Resultados enriquecidos con toda la informaci√≥n
        - Optimizado para b√∫squedas r√°pidas en el frontend
      parameters:
        - name: q
          in: query
          required: true
          description: T√©rmino de b√∫squeda (nombre del producto)
          schema:
            type: string
          example: "iPhone"
        - name: limit
          in: query
          required: false
          description: Cantidad m√°xima de resultados
          schema:
            type: integer
            minimum: 1
            maximum: 50
            default: 20
          example: 20
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Lista de productos encontrados
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ProductEnriched'
              example:
                - id: "PROD_001"
                  name: "iPhone 15 Pro"
                  state: true
                  category:
                    id: 1
                    name: "Electr√≥nicos"
                    description: "Dispositivos electr√≥nicos"
                  product_type: "PHYSICAL"
                  purchase_price: 999.99
                  stock_quantity: 25
                  description: "Smartphone Apple iPhone 15 Pro 128GB"
                  stock_status: "in_stock"
                  price_formatted: "$999.99"
                  has_valid_stock: true
                  has_valid_price: true
        '400':
          description: Par√°metro de b√∫squeda requerido
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Token de autenticaci√≥n requerido
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  # Nuevos Endpoints para Cantidades Decimales y Precios por Unidad
  /products/by-category:
    get:
      tags:
        - Products
      summary: Obtener productos por categor√≠a con informaci√≥n de precios
      description: |
        Obtiene productos filtrados por categor√≠as con informaci√≥n completa de precios por unidad.
        
        **Caracter√≠sticas:**
        - Filtra por m√∫ltiples categor√≠as
        - Incluye informaci√≥n de precios por unidad cuando est√° disponible
        - Prioriza unit_prices sobre precios generales
        - Optimizado para productos de peso (Verduras, Frutas, Carnes)
      parameters:
        - name: categories
          in: query
          required: true
          description: Lista de nombres de categor√≠as separadas por comas
          schema:
            type: string
          example: "Verduras,Frutas"
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Lista de productos con informaci√≥n de precios
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ProductWithPricing'
              example:
                - product_id: "PROD_TOMATE_001"
                  product_name: "Tomate Cherry"
                  category_name: "Verduras"
                  price: 25.50
                  unit: "kg"
                  price_source: "unit_price"
                  has_unit_pricing: true
                - product_id: "PROD_PAPA_001"
                  product_name: "Papa Criolla"
                  category_name: "Verduras"
                  price: 18.00
                  unit: "kg"
                  price_source: "unit_price"
                  has_unit_pricing: true
        '400':
          description: Par√°metros inv√°lidos
        '401':
          description: Token no v√°lido o expirado

  /products/{id}/price:
    get:
      tags:
        - Products
      summary: Obtener precio espec√≠fico de un producto por unidad
      description: |
        Obtiene el precio de un producto para una unidad espec√≠fica.
        
        **L√≥gica de precios:**
        - Si se especifica `unit` y existe precio para esa unidad ‚Üí retorna precio por unidad
        - Si no se especifica `unit` o no existe precio por unidad ‚Üí retorna precio general
        - Para categor√≠as Verduras/Frutas se recomienda siempre especificar unidad
      parameters:
        - name: id
          in: path
          required: true
          description: ID √∫nico del producto
          schema:
            type: string
          example: "PROD_TOMATE_001"
        - name: unit
          in: query
          required: false
          description: Unidad de medida (kg, caja, litro, etc.)
          schema:
            type: string
          example: "kg"
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Precio del producto para la unidad especificada
          content:
            application/json:
              schema:
                type: object
                properties:
                  product_id:
                    type: string
                    example: "PROD_TOMATE_001"
                  price:
                    type: number
                    format: float
                    example: 25.50
                  unit:
                    type: string
                    example: "kg"
                  price_source:
                    type: string
                    example: "unit_price"
        '404':
          description: Producto no encontrado o precio no disponible
        '401':
          description: Token no v√°lido o expirado

  /products/{id}/units:
    get:
      tags:
        - Products
      summary: Obtener unidades disponibles para un producto
      description: |
        Lista todas las unidades de medida disponibles para un producto con sus respectivos precios.
        
        **Casos de uso:**
        - Mostrar opciones de unidades en el frontend
        - Validar unidades disponibles antes de crear una venta
        - Configurar selectors de unidades din√°micamente
      parameters:
        - name: id
          in: path
          required: true
          description: ID √∫nico del producto
          schema:
            type: string
          example: "PROD_TOMATE_001"
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Lista de unidades disponibles con precios
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductUnitsResponse'
              example:
                product_id: "PROD_TOMATE_001"
                available_units:
                  - id: 1
                    product_id: "PROD_TOMATE_001"
                    unit: "kg"
                    price_per_unit: 25.50
                    effective_date: "2024-01-15T10:30:00Z"
                  - id: 2
                    product_id: "PROD_TOMATE_001"
                    unit: "caja"
                    price_per_unit: 450.00
                    effective_date: "2024-01-15T10:30:00Z"
        '404':
          description: Producto no encontrado
        '401':
          description: Token no v√°lido o expirado

    post:
      tags:
        - Products
      summary: Crear precio por unidad para un producto
      description: |
        Crea un nuevo precio espec√≠fico para una unidad de medida de un producto.
        
        **Casos de uso:**
        - Configurar precios por kg, caja, litro, etc.
        - Actualizar precios para diferentes unidades de medida
        - Gesti√≥n administrativa de precios por unidad
      parameters:
        - name: id
          in: path
          required: true
          description: ID √∫nico del producto
          schema:
            type: string
          example: "PROD_TOMATE_001"
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUnitPriceRequest'
            example:
              unit: "kg"
              price_per_unit: 25.50
      responses:
        '201':
          description: Precio por unidad creado exitosamente
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnitPrice'
              example:
                id: 1
                product_id: "PROD_TOMATE_001"
                unit: "kg"
                price_per_unit: 25.50
                effective_date: "2024-01-15T10:30:00Z"
        '400':
          description: Datos inv√°lidos o unidad ya existe
        '404':
          description: Producto no encontrado
        '401':
          description: Token no v√°lido o expirado

  /products/paginated:
    get:
      tags:
        - Products
      summary: Obtener productos paginados con informaci√≥n enriquecida
      description: |
        Recupera una lista paginada de productos enriquecidos incluyendo:
        - Stock actual y estado calculado
        - Precios y fechas de actualizaci√≥n
        - Descripci√≥n del producto
        - Informaci√≥n de categor√≠as
        - Campos calculados autom√°ticos
        
        **Ideal para:** Interfaces de administraci√≥n, listados de productos con toda la informaci√≥n
      parameters:
        - name: page
          in: query
          required: false
          description: N√∫mero de p√°gina (empezando desde 1)
          schema:
            type: integer
            minimum: 1
            default: 1
          example: 1
        - name: limit
          in: query
          required: false
          description: Cantidad de elementos por p√°gina
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 10
          example: 10
        - name: search
          in: query
          required: false
          description: Buscar por nombre del producto
          schema:
            type: string
          example: "iPhone"
        - name: category
          in: query
          required: false
          description: Filtrar por categor√≠a
          schema:
            type: string
          example: "Electr√≥nicos"
        - name: sortBy
          in: query
          required: false
          description: Campo por el cual ordenar
          schema:
            type: string
            enum: ["name", "price", "stock", "category"]
            default: "name"
          example: "name"
        - name: sortOrder
          in: query
          required: false
          description: Orden de clasificaci√≥n
          schema:
            type: string
            enum: ["asc", "desc"]
            default: "asc"
          example: "asc"
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Lista paginada de productos enriquecidos
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/ProductEnriched'
                  pagination:
                    type: object
                    properties:
                      page:
                        type: integer
                        example: 1
                      limit:
                        type: integer
                        example: 10
                      total:
                        type: integer
                        example: 150
                      totalPages:
                        type: integer
                        example: 15
              example:
                data:
                  - id: "PROD_001"
                    name: "iPhone 15 Pro"
                    state: true
                    category:
                      id: 1
                      name: "Electr√≥nicos"
                      description: "Dispositivos electr√≥nicos"
                    product_type: "PHYSICAL"
                    purchase_price: 999.99
                    stock_quantity: 25
                    description: "Smartphone Apple iPhone 15 Pro 128GB"
                    stock_status: "in_stock"
                    price_formatted: "$999.99"
                    has_valid_stock: true
                    has_valid_price: true
                pagination:
                  page: 1
                  limit: 10
                  total: 150
                  totalPages: 15
        '400':
          description: Par√°metros de paginaci√≥n inv√°lidos
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Token de autenticaci√≥n requerido
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  # Product Description Endpoints
  /product_description/{product_id}:
    post:
      tags:
        - Product Descriptions
      summary: Crear descripci√≥n de producto
      description: A√±ade una nueva descripci√≥n para un producto
      parameters:
        - name: product_id
          in: path
          required: true
          description: ID del producto
          schema:
            type: string
            example: "prod_123"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductDescription'
      responses:
        '201':
          description: Descripci√≥n creada exitosamente
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductDescription'

  /product_description/{id}:
    get:
      tags:
        - Product Descriptions
      summary: Obtener descripci√≥n por ID
      description: Recupera los detalles de una descripci√≥n espec√≠fica
      parameters:
        - name: id
          in: path
          required: true
          description: ID de la descripci√≥n
          schema:
            type: integer
            example: 1
      responses:
        '200':
          description: Detalles de la descripci√≥n
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductDescription'

    put:
      tags:
        - Product Descriptions
      summary: Actualizar descripci√≥n
      description: Actualiza una descripci√≥n existente
      parameters:
        - name: id
          in: path
          required: true
          description: ID de la descripci√≥n
          schema:
            type: integer
            example: 1
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductDescription'
      responses:
        '200':
          description: Descripci√≥n actualizada exitosamente
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductDescription'

  # Product Price Endpoints
  /product_price/product_id/{product_id}:
    post:
      tags:
        - Product Prices
      summary: Crear precio de producto
      description: Establece el precio para un producto
      parameters:
        - name: product_id
          in: path
          required: true
          description: ID del producto
          schema:
            type: string
            example: "prod_123"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductPrice'
      responses:
        '201':
          description: Precio creado exitosamente
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductPrice'

    get:
      tags:
        - Product Prices
      summary: Obtener precio por ID de producto
      description: Recupera el precio actual de un producto
      parameters:
        - name: product_id
          in: path
          required: true
          description: ID del producto
          schema:
            type: string
            example: "prod_123"
      responses:
        '200':
          description: Precio del producto
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductPrice'

    put:
      tags:
        - Product Prices
      summary: Actualizar precio por ID de producto
      description: Actualiza el precio de un producto
      parameters:
        - name: product_id
          in: path
          required: true
          description: ID del producto
          schema:
            type: string
            example: "prod_123"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductPrice'
      responses:
        '200':
          description: Precio actualizado exitosamente
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductPrice'

  /product_price/{id}:
    get:
      tags:
        - Product Prices
      summary: Obtener precio por ID
      description: Recupera un precio espec√≠fico por su ID
      parameters:
        - name: id
          in: path
          required: true
          description: ID del precio
          schema:
            type: integer
            example: 1
      responses:
        '200':
          description: Detalles del precio
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductPrice'

  /product_price/id/{id}:
    put:
      tags:
        - Product Prices
      summary: Actualizar precio por ID
      description: Actualiza un precio espec√≠fico por su ID
      parameters:
        - name: id
          in: path
          required: true
          description: ID del precio
          schema:
            type: integer
            example: 1
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductPrice'
      responses:
        '200':
          description: Precio actualizado exitosamente
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductPrice'

  # Stock Endpoints
  /stock/{product_id}:
    post:
      tags:
        - Stock
      summary: Crear registro de stock
      description: Crea un nuevo registro de stock para un producto
      parameters:
        - name: product_id
          in: path
          required: true
          description: ID del producto
          schema:
            type: string
            example: "prod_123"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Stock'
      responses:
        '201':
          description: Stock creado exitosamente
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Stock'

  /stock/{id}:
    get:
      tags:
        - Stock
      summary: Obtener stock por ID
      description: Recupera informaci√≥n de stock por ID
      parameters:
        - name: id
          in: path
          required: true
          description: ID del stock
          schema:
            type: integer
            example: 1
      responses:
        '200':
          description: Informaci√≥n del stock
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Stock'

    put:
      tags:
        - Stock
      summary: Actualizar stock por ID
      description: Actualiza informaci√≥n de stock
      parameters:
        - name: id
          in: path
          required: true
          description: ID del stock
          schema:
            type: integer
            example: 1
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Stock'
      responses:
        '200':
          description: Stock actualizado exitosamente
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Stock'

  /stock/product_id/{product_id}:
    get:
      tags:
        - Stock
      summary: Obtener stock por ID de producto
      description: Recupera informaci√≥n de stock de un producto espec√≠fico
      parameters:
        - name: product_id
          in: path
          required: true
          description: ID del producto
          schema:
            type: string
            example: "prod_123"
      responses:
        '200':
          description: Stock del producto
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Stock'

    put:
      tags:
        - Stock
      summary: Actualizar stock por ID de producto
      description: Actualiza el stock de un producto espec√≠fico
      parameters:
        - name: product_id
          in: path
          required: true
          description: ID del producto
          schema:
            type: string
            example: "prod_123"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Stock'
      responses:
        '200':
          description: Stock actualizado exitosamente
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Stock'

  # Inventory Endpoints
  /inventory/:
    post:
      tags:
        - Inventory
      summary: Crear inventario
      description: Crea un nuevo inventario
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Inventory'
      responses:
        '201':
          description: Inventario creado exitosamente
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Inventory'

  /inventory/{id}:
    get:
      tags:
        - Inventory
      summary: Obtener inventario con items
      description: Recupera un inventario espec√≠fico con todos sus items
      parameters:
        - name: id
          in: path
          required: true
          description: ID del inventario
          schema:
            type: string
            example: "inv_123"
      responses:
        '200':
          description: Detalles del inventario
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Inventory'

    put:
      tags:
        - Inventory
      summary: Invalidar inventario
      description: Marca un inventario como inv√°lido
      parameters:
        - name: id
          in: path
          required: true
          description: ID del inventario
          schema:
            type: string
            example: "inv_123"
      responses:
        '200':
          description: Inventario invalidado exitosamente
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'

  /inventory/{page}/{pageSize}:
    get:
      tags:
        - Inventory
      summary: Obtener inventarios paginados
      description: Recupera una lista paginada de inventarios
      parameters:
        - name: page
          in: path
          required: true
          description: N√∫mero de p√°gina
          schema:
            type: integer
            minimum: 1
            example: 1
        - name: pageSize
          in: path
          required: true
          description: Cantidad de elementos por p√°gina
          schema:
            type: integer
            minimum: 1
            maximum: 100
            example: 10
      responses:
        '200':
          description: Lista paginada de inventarios
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedResponse'

  # Manual Adjustment Endpoints
  /manual_adjustment/:
    post:
      tags:
        - Manual Adjustments
      summary: Crear ajuste manual
      description: Crea un nuevo ajuste manual de inventario
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ManualAdjustment'
      responses:
        '201':
          description: Ajuste manual creado exitosamente
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ManualAdjustment'

  /manual_adjustment/{page}/{pageSize}:
    get:
      tags:
        - Manual Adjustments
      summary: Obtener ajustes manuales paginados
      description: Recupera una lista paginada de ajustes manuales
      parameters:
        - name: page
          in: path
          required: true
          description: N√∫mero de p√°gina
          schema:
            type: integer
            minimum: 1
            example: 1
        - name: pageSize
          in: path
          required: true
          description: Cantidad de elementos por p√°gina
          schema:
            type: integer
            minimum: 1
            maximum: 100
            example: 10
      responses:
        '200':
          description: Lista paginada de ajustes manuales
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedResponse'

  # Supplier Endpoints
  /supplier/:
    post:
      tags:
        - Suppliers
      summary: Crear proveedor
      description: Crea un nuevo proveedor
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Supplier'
      responses:
        '201':
          description: Proveedor creado exitosamente
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Supplier'

  /supplier/{id}:
    get:
      tags:
        - Suppliers
      summary: Obtener proveedor por ID
      description: Recupera los detalles de un proveedor espec√≠fico
      parameters:
        - name: id
          in: path
          required: true
          description: ID del proveedor
          schema:
            type: string
            example: "supplier_123"
      responses:
        '200':
          description: Detalles del proveedor
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Supplier'

    put:
      tags:
        - Suppliers
      summary: Actualizar proveedor
      description: Actualiza los detalles de un proveedor existente
      parameters:
        - name: id
          in: path
          required: true
          description: ID del proveedor
          schema:
            type: string
            example: "supplier_123"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Supplier'
      responses:
        '200':
          description: Proveedor actualizado exitosamente
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Supplier'

  /supplier/name/{name}:
    get:
      tags:
        - Suppliers
      summary: Buscar proveedor por nombre
      description: Busca proveedores que coincidan con el nombre especificado
      parameters:
        - name: name
          in: path
          required: true
          description: Nombre del proveedor a buscar
          schema:
            type: string
            example: "Tech Supplies"
      responses:
        '200':
          description: Lista de proveedores encontrados
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Supplier'

  /supplier/{page}/{pageSize}:
    get:
      tags:
        - Suppliers
      summary: Obtener proveedores paginados
      description: Recupera una lista paginada de proveedores
      parameters:
        - name: page
          in: path
          required: true
          description: N√∫mero de p√°gina
          schema:
            type: integer
            minimum: 1
            example: 1
        - name: pageSize
          in: path
          required: true
          description: Cantidad de elementos por p√°gina
          schema:
            type: integer
            minimum: 1
            maximum: 100
            example: 10
      responses:
        '200':
          description: Lista paginada de proveedores
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedResponse'

  /supplier/delete/{id}:
    put:
      tags:
        - Suppliers
      summary: Eliminar proveedor
      description: Marca un proveedor como eliminado (soft delete)
      parameters:
        - name: id
          in: path
          required: true
          description: ID del proveedor
          schema:
            type: string
            example: "supplier_123"
      responses:
        '200':
          description: Proveedor eliminado exitosamente
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'

  # Client Endpoints
  /client/:
    post:
      tags:
        - Clients
      summary: Crear cliente
      description: Crea un nuevo cliente
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Client'
      responses:
        '201':
          description: Cliente creado exitosamente
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Client'

  /client/{id}:
    get:
      tags:
        - Clients
      summary: Obtener cliente por ID
      description: Recupera los detalles de un cliente espec√≠fico
      parameters:
        - name: id
          in: path
          required: true
          description: ID del cliente
          schema:
            type: string
            example: "client_123"
      responses:
        '200':
          description: Detalles del cliente
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Client'

    put:
      tags:
        - Clients
      summary: Actualizar cliente
      description: Actualiza los detalles de un cliente existente
      parameters:
        - name: id
          in: path
          required: true
          description: ID del cliente
          schema:
            type: string
            example: "client_123"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Client'
      responses:
        '200':
          description: Cliente actualizado exitosamente
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Client'

  /client/name/{name}:
    get:
      tags:
        - Clients
      summary: Buscar cliente por nombre
      description: Busca clientes que coincidan con el nombre especificado
      parameters:
        - name: name
          in: path
          required: true
          description: Nombre del cliente a buscar
          schema:
            type: string
            example: "Mar√≠a"
      responses:
        '200':
          description: Lista de clientes encontrados
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Client'

  /client/{page}/{pageSize}:
    get:
      tags:
        - Clients
      summary: Obtener clientes paginados
      description: Recupera una lista paginada de clientes
      parameters:
        - name: page
          in: path
          required: true
          description: N√∫mero de p√°gina
          schema:
            type: integer
            minimum: 1
            example: 1
        - name: pageSize
          in: path
          required: true
          description: Cantidad de elementos por p√°gina
          schema:
            type: integer
            minimum: 1
            maximum: 100
            example: 10
      responses:
        '200':
          description: Lista paginada de clientes
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedResponse'

  /client/delete/{id}:
    put:
      tags:
        - Clients
      summary: Eliminar cliente
      description: Marca un cliente como eliminado (soft delete)
      parameters:
        - name: id
          in: path
          required: true
          description: ID del cliente
          schema:
            type: string
            example: "client_123"
      responses:
        '200':
          description: Cliente eliminado exitosamente
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'

  # Tax Rate Endpoints
  /tax_rate/:
    post:
      tags:
        - Tax Rates
      summary: Crear tasa de impuesto
      description: Crea una nueva tasa de impuesto
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TaxRate'
      responses:
        '201':
          description: Tasa de impuesto creada exitosamente
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaxRate'

  /tax_rate/{id}:
    get:
      tags:
        - Tax Rates
      summary: Obtener tasa de impuesto por ID
      description: Recupera los detalles de una tasa de impuesto espec√≠fica
      parameters:
        - name: id
          in: path
          required: true
          description: ID de la tasa de impuesto
          schema:
            type: integer
            example: 1
      responses:
        '200':
          description: Detalles de la tasa de impuesto
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaxRate'

    put:
      tags:
        - Tax Rates
      summary: Actualizar tasa de impuesto
      description: Actualiza los detalles de una tasa de impuesto existente
      parameters:
        - name: id
          in: path
          required: true
          description: ID de la tasa de impuesto
          schema:
            type: integer
            example: 1
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TaxRate'
      responses:
        '200':
          description: Tasa de impuesto actualizada exitosamente
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaxRate'

  /tax_rate/name/{name}:
    get:
      tags:
        - Tax Rates
      summary: Buscar tasa de impuesto por nombre
      description: Busca tasas de impuesto que coincidan con el nombre especificado
      parameters:
        - name: name
          in: path
          required: true
          description: Nombre de la tasa de impuesto a buscar
          schema:
            type: string
            example: "IVA"
      responses:
        '200':
          description: Lista de tasas de impuesto encontradas
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TaxRate'

  /tax_rate/{page}/{pageSize}:
    get:
      tags:
        - Tax Rates
      summary: Obtener tasas de impuesto paginadas
      description: Recupera una lista paginada de tasas de impuesto
      parameters:
        - name: page
          in: path
          required: true
          description: N√∫mero de p√°gina
          schema:
            type: integer
            minimum: 1
            example: 1
        - name: pageSize
          in: path
          required: true
          description: Cantidad de elementos por p√°gina
          schema:
            type: integer
            minimum: 1
            maximum: 100
            example: 10
      responses:
        '200':
          description: Lista paginada de tasas de impuesto
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedResponse'

  # Purchase Endpoints
  /purchase/:
    post:
      tags:
        - Purchases
      summary: Crear compra
      description: Registra una nueva compra
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Purchase'
      responses:
        '201':
          description: Compra registrada exitosamente
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Purchase'

  /purchase/cancel/{id}:
    put:
      tags:
        - Purchases
      summary: Cancelar compra
      description: Cancela una compra existente
      parameters:
        - name: id
          in: path
          required: true
          description: ID de la compra
          schema:
            type: string
            example: "purchase_123"
      responses:
        '200':
          description: Compra cancelada exitosamente
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'

  /purchase/{id}:
    get:
      tags:
        - Purchases
      summary: Obtener compra por ID
      description: Recupera los detalles de una compra espec√≠fica
      parameters:
        - name: id
          in: path
          required: true
          description: ID de la compra
          schema:
            type: string
            example: "purchase_123"
      responses:
        '200':
          description: Detalles de la compra
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Purchase'

  /purchase/supplier_id/{supplier_id}:
    get:
      tags:
        - Purchases
      summary: Obtener compras por ID de proveedor
      description: Recupera todas las compras de un proveedor espec√≠fico
      parameters:
        - name: supplier_id
          in: path
          required: true
          description: ID del proveedor
          schema:
            type: string
            example: "supplier_123"
      responses:
        '200':
          description: Lista de compras del proveedor
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Purchase'

  /purchase/supplier_name/{name}:
    get:
      tags:
        - Purchases
      summary: Obtener compras por nombre de proveedor
      description: Recupera todas las compras de un proveedor por su nombre
      parameters:
        - name: name
          in: path
          required: true
          description: Nombre del proveedor
          schema:
            type: string
            example: "Tech Supplies"
      responses:
        '200':
          description: Lista de compras del proveedor
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Purchase'

  /purchase/date_range/:
    get:
      tags:
        - Purchases
      summary: Obtener compras por rango de fechas
      description: Recupera compras dentro de un rango de fechas espec√≠fico
      parameters:
        - name: start_date
          in: query
          required: true
          description: Fecha de inicio (formato YYYY-MM-DD)
          schema:
            type: string
            format: date
            example: "2024-01-01"
        - name: end_date
          in: query
          required: true
          description: Fecha de fin (formato YYYY-MM-DD)
          schema:
            type: string
            format: date
            example: "2024-01-31"
      responses:
        '200':
          description: Lista de compras en el rango de fechas
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Purchase'

  # Sale Endpoints
  /sale/:
    post:
      tags:
        - Sales
      summary: Crear venta
      description: Registra una nueva venta
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Sale'
      responses:
        '201':
          description: Venta registrada exitosamente
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Sale'

  /sale/with-units:
    post:
      tags:
        - Sales
      summary: Crear venta con cantidades decimales y unidades espec√≠ficas
      description: |
        Procesa una venta utilizando el nuevo sistema de cantidades decimales y unidades espec√≠ficas.
        
        **Caracter√≠sticas:**
        - ‚úÖ Soporta cantidades decimales (2.5 kg, 1.75 litros)
        - ‚úÖ Valida unidades disponibles para cada producto
        - ‚úÖ Calcula precios usando unit_prices cuando est√°n disponibles
        - ‚úÖ Actualiza inventario con cantidades decimales
        - ‚úÖ Manejo autom√°tico de productos con/sin unidades espec√≠ficas
        
        **Casos de uso:**
        - Ventas de productos de peso (verduras, frutas, carnes)
        - Ventas con m√∫ltiples unidades por producto
        - Integraci√≥n con el nuevo sistema de precios por unidad
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SaleWithUnitsRequest'
            example:
              client_id: "CLIENT_001"
              details:
                - product_id: "PROD_TOMATE_001"
                  quantity: 2.5
                  unit: "kg"
                - product_id: "PROD_PAPA_001"
                  quantity: 1.75
                  unit: "kg"
                - product_id: "PROD_REGULAR_001"
                  quantity: 3.0
                  # Sin unidad para productos regulares
      responses:
        '201':
          description: Venta creada exitosamente con cantidades decimales
          content:
            application/json:
              schema:
                type: object
                properties:
                  sale_id:
                    type: string
                    example: "SALE_001"
                  total_amount:
                    type: number
                    format: float
                    example: 127.50
                  client_id:
                    type: string
                    example: "CLIENT_001"
                  details:
                    type: array
                    items:
                      $ref: '#/components/schemas/SaleDetailWithUnit'
                  created_at:
                    type: string
                    format: date-time
                    example: "2024-01-15T10:30:00Z"
              example:
                sale_id: "SALE_001"
                total_amount: 127.50
                client_id: "CLIENT_001"
                details:
                  - product_id: "PROD_TOMATE_001"
                    product_name: "Tomate Cherry"
                    quantity: 2.5
                    unit: "kg"
                    unit_price: 25.50
                    subtotal: 63.75
                  - product_id: "PROD_PAPA_001"
                    product_name: "Papa Criolla"
                    quantity: 1.75
                    unit: "kg"
                    unit_price: 18.00
                    subtotal: 31.50
                  - product_id: "PROD_REGULAR_001"
                    product_name: "Producto Regular"
                    quantity: 3.0
                    unit: ""
                    unit_price: 10.75
                    subtotal: 32.25
                created_at: "2024-01-15T10:30:00Z"
        '400':
          description: |
            Error en validaci√≥n de datos:
            - Cantidad inv√°lida (debe ser > 0, m√°ximo 2 decimales)
            - Unidad no disponible para el producto
            - Stock insuficiente
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                invalid_quantity:
                  summary: Cantidad inv√°lida
                  value:
                    error: "Cantidad inv√°lida: 2.555 kg. M√°ximo 2 decimales permitidos"
                invalid_unit:
                  summary: Unidad no disponible
                  value:
                    error: "Unidad 'litro' no disponible para producto PROD_TOMATE_001"
                insufficient_stock:
                  summary: Stock insuficiente
                  value:
                    error: "Stock insuficiente para PROD_TOMATE_001. Disponible: 1.5 kg, Solicitado: 2.5 kg"
        '404':
          description: Cliente o producto no encontrado
        '401':
          description: Token no v√°lido o expirado

  /sale/{id}:
    get:
      tags:
        - Sales
      summary: Obtener venta por ID
      description: Recupera los detalles de una venta espec√≠fica
      parameters:
        - name: id
          in: path
          required: true
          description: ID de la venta
          schema:
            type: string
            example: "sale_123"
      responses:
        '200':
          description: Detalles de la venta
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Sale'

    put:
      tags:
        - Sales
      summary: Cancelar venta
      description: Cancela una venta existente
      parameters:
        - name: id
          in: path
          required: true
          description: ID de la venta
          schema:
            type: string
            example: "sale_123"
      responses:
        '200':
          description: Venta cancelada exitosamente
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'

  /sale/client_id/{client_id}:
    get:
      tags:
        - Sales
      summary: Obtener ventas por ID de cliente
      description: Recupera todas las ventas de un cliente espec√≠fico
      parameters:
        - name: client_id
          in: path
          required: true
          description: ID del cliente
          schema:
            type: string
            example: "client_123"
      responses:
        '200':
          description: Lista de ventas del cliente
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Sale'

  /sale/client_name/{name}:
    get:
      tags:
        - Sales
      summary: Obtener ventas por nombre de cliente
      description: Recupera todas las ventas de un cliente por su nombre
      parameters:
        - name: name
          in: path
          required: true
          description: Nombre del cliente
          schema:
            type: string
            example: "Mar√≠a"
      responses:
        '200':
          description: Lista de ventas del cliente
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Sale'

  /sale/date_range/:
    get:
      tags:
        - Sales
      summary: Obtener ventas por rango de fechas
      description: Recupera ventas dentro de un rango de fechas espec√≠fico
      parameters:
        - name: start_date
          in: query
          required: true
          description: Fecha de inicio (formato YYYY-MM-DD)
          schema:
            type: string
            format: date
            example: "2024-01-01"
        - name: end_date
          in: query
          required: true
          description: Fecha de fin (formato YYYY-MM-DD)
          schema:
            type: string
            format: date
            example: "2024-01-31"
      responses:
        '200':
          description: Lista de ventas en el rango de fechas
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Sale'

  # Schedule Endpoints
  /schedules/{id}:
    get:
      tags:
        - Schedules
      summary: Obtener programaci√≥n por ID
      description: Recupera los detalles de una programaci√≥n espec√≠fica
      parameters:
        - name: id
          in: path
          required: true
          description: ID de la programaci√≥n
          schema:
            type: string
            example: "schedule_123"
      responses:
        '200':
          description: Detalles de la programaci√≥n
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Schedule'

  /schedules/product/{productId}/date/{date}/available:
    get:
      tags:
        - Schedules
      summary: Obtener programaciones disponibles
      description: Recupera las programaciones disponibles para un producto en una fecha espec√≠fica
      parameters:
        - name: productId
          in: path
          required: true
          description: ID del producto
          schema:
            type: string
            example: "prod_123"
        - name: date
          in: path
          required: true
          description: Fecha de la programaci√≥n (formato YYYY-MM-DD)
          schema:
            type: string
            format: date
            example: "2024-01-15"
      responses:
        '200':
          description: Lista de programaciones disponibles
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Schedule'

  /schedules/generate/daily:
    post:
      tags:
        - Schedules
      summary: Generar programaciones diarias
      description: Genera autom√°ticamente las programaciones para el d√≠a actual
      responses:
        '200':
          description: Programaciones diarias generadas exitosamente
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'

  /schedules/generate/date:
    post:
      tags:
        - Schedules
      summary: Generar programaciones para fecha espec√≠fica
      description: Genera programaciones para una fecha espec√≠fica
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                date:
                  type: string
                  format: date
                  example: "2024-01-15"
                  description: Fecha para generar programaciones
              required:
                - date
      responses:
        '200':
          description: Programaciones generadas exitosamente para la fecha especificada
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'

  /schedules/generate/next-days:
    post:
      tags:
        - Schedules
      summary: Generar programaciones para pr√≥ximos N d√≠as
      description: Genera programaciones para los pr√≥ximos N d√≠as
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                days:
                  type: integer
                  minimum: 1
                  maximum: 365
                  example: 7
                  description: N√∫mero de d√≠as hacia adelante para generar programaciones
              required:
                - days
      responses:
        '200':
          description: Programaciones generadas exitosamente para los pr√≥ximos d√≠as
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'

tags:
  - name: Home
    description: Endpoint b√°sico de bienvenida
  - name: Authentication
    description: Endpoints de autenticaci√≥n y autorizaci√≥n
  - name: Categories
    description: Gesti√≥n de categor√≠as de productos
  - name: Products
    description: Gesti√≥n de productos
  - name: Product Descriptions
    description: Gesti√≥n de descripciones de productos
  - name: Product Prices
    description: Gesti√≥n de precios de productos
  - name: Stock
    description: Gesti√≥n de stock e inventario
  - name: Inventory
    description: Gesti√≥n de inventarios
  - name: Manual Adjustments
    description: Ajustes manuales de inventario
  - name: Suppliers
    description: Gesti√≥n de proveedores
  - name: Clients
    description: Gesti√≥n de clientes
  - name: Tax Rates
    description: Gesti√≥n de tasas de impuestos
  - name: Purchases
    description: Gesti√≥n de compras
  - name: Sales
    description: Gesti√≥n de ventas
  - name: Schedules
    description: Sistema de programaci√≥n autom√°tica
