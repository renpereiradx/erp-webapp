/**
 * Servicio de autenticaci√≥n para el sistema ERP
 * Migrado para usar el cliente oficial del Business Management API
 */

import { apiClient } from './api';

// Helper para categorizar errores y proporcionar contexto adicional
const getErrorDetails = (error) => {
  const status = error.response?.status;
  const code = error.code;
  
  // Categor√≠as de errores con iconos y sugerencias
  const errorCategories = {
    AUTHENTICATION: {
      icon: 'üîê',
      title: 'Error de Autenticaci√≥n',
      color: 'red'
    },
    NETWORK: {
      icon: 'üåê',
      title: 'Error de Conexi√≥n',
      color: 'orange'
    },
    SERVER: {
      icon: '‚öôÔ∏è',
      title: 'Error del Servidor',
      color: 'red'
    },
    VALIDATION: {
      icon: 'üìù',
      title: 'Error de Validaci√≥n',
      color: 'yellow'
    },
    PERMISSION: {
      icon: 'üö´',
      title: 'Error de Permisos',
      color: 'red'
    },
    RATE_LIMIT: {
      icon: '‚è∞',
      title: 'L√≠mite de Solicitudes',
      color: 'orange'
    }
  };
  
  // Determinar categor√≠a basada en el error
  let category = 'SERVER';
  let suggestions = [];
  
  if (status === 401) {
    category = 'AUTHENTICATION';
    suggestions = [
      'Verifica que el usuario y contrase√±a sean correctos',
      'Aseg√∫rate de que tu cuenta est√© activa',
      'Intenta recuperar tu contrase√±a si la has olvidado'
    ];
  } else if (status === 403) {
    category = 'PERMISSION';
    suggestions = [
      'Contacta al administrador del sistema',
      'Verifica que tu cuenta tenga los permisos necesarios',
      'Espera a que se active tu cuenta si es nueva'
    ];
  } else if (status === 400 || status === 422) {
    category = 'VALIDATION';
    suggestions = [
      'Verifica que todos los campos est√©n completos',
      'Aseg√∫rate de que el formato de los datos sea correcto',
      'Intenta con diferentes credenciales'
    ];
  } else if (status === 429) {
    category = 'RATE_LIMIT';
    suggestions = [
      'Espera unos minutos antes de intentar nuevamente',
      'No hagas demasiadas solicitudes seguidas',
      'Contacta al soporte si necesitas acceso urgente'
    ];
  } else if (code === 'ECONNREFUSED' || code === 'NETWORK_ERROR' || code === 'TIMEOUT') {
    category = 'NETWORK';
    suggestions = [
      'Verifica tu conexi√≥n a internet',
      'Comprueba que el servidor est√© disponible',
      'Intenta nuevamente en unos minutos',
      'Contacta al soporte t√©cnico si persiste'
    ];
  } else if (status >= 500) {
    category = 'SERVER';
    suggestions = [
      'El problema es temporal, intenta m√°s tarde',
      'Nuestro equipo t√©cnico ha sido notificado',
      'Contacta al soporte si es urgente'
    ];
  }
  
  return {
    category: errorCategories[category],
    suggestions
  };
};

export const authService = {
  /**
   * Iniciar sesi√≥n con username/email y contrase√±a
   * Usa el cliente oficial del Business Management API
   */
  login: async (credentials) => {
    try {
      const { username, password } = credentials;
      
      // Usar el m√©todo login del cliente oficial
      const response = await apiClient.login(username, password);
      
      // Extraer token y role_id de la respuesta
      const { token, role_id } = response;
      
      if (!token) {
        throw new Error('Token no recibido del servidor');
      }
      
      // Crear objeto de usuario basado en la respuesta
      const user = {
        id: role_id || 1,
        username,
        email: username, // Guardar el valor ingresado como email tambi√©n
        role: role_id || 'user',
        role_id,
        name: username || 'Usuario',
        company: 'ERP Systems Inc.',
        lastLogin: new Date().toISOString(),
      };
      
      return {
        user,
        token,
        role_id,
        message: 'Login exitoso'
      };
      
    } catch (error) {
      // Manejo de errores de la API con mensajes amigables para el usuario
      console.error('Error en login:', error);
      
      const { category, suggestions } = getErrorDetails(error);
      
      // Si la respuesta del servidor contiene un mensaje espec√≠fico, usarlo
      const serverMessage = error.response?.data?.message || error.response?.data || error.message;
      
      if (category.title === 'Error de Autenticaci√≥n') {
        // Usar el mensaje del servidor si est√° disponible y es espec√≠fico
        if (typeof serverMessage === 'string' && serverMessage.length > 0) {
          throw new Error(serverMessage);
        }
        throw new Error('Usuario o contrase√±a incorrectos. Por favor, verifica tus credenciales e intenta nuevamente.');
      } else if (category.title === 'Error de Validaci√≥n') {
        throw new Error('Los datos ingresados no son v√°lidos. Aseg√∫rate de completar todos los campos correctamente.');
      } else if (category.title === 'Error de Permisos') {
        throw new Error('Tu cuenta ha sido bloqueada o no tienes permisos para acceder. Contacta al administrador del sistema.');
      } else if (category.title === 'Error del Servidor') {
        // Para errores 500+, pero si el servidor responde con un mensaje espec√≠fico, usarlo
        if (typeof serverMessage === 'string' && serverMessage.length > 0) {
          throw new Error(serverMessage);
        }
        throw new Error('El servicio de autenticaci√≥n no est√° disponible. Contacta al soporte t√©cnico.');
      } else if (category.title === 'L√≠mite de Solicitudes') {
        throw new Error('Demasiados intentos de inicio de sesi√≥n. Espera unos minutos antes de intentar nuevamente.');
      } else {
        // Mensaje gen√©rico m√°s amigable - priorizar mensaje del servidor
        if (typeof serverMessage === 'string' && serverMessage.length > 0) {
          throw new Error(serverMessage);
        }
        throw new Error(error.message || 'Error inesperado al iniciar sesi√≥n. Intenta nuevamente o contacta al soporte t√©cnico.');
      }
    }
  },

  /**
   * Registrar nuevo usuario usando el cliente oficial
   */
  register: async (userData) => {
    try {
      // Usar el m√©todo signup del cliente oficial
      const response = await apiClient.signup(userData.email || userData.username, userData.password);
      
      const { token, role_id } = response;
      
      if (!token) {
        throw new Error('Token no recibido del servidor');
      }
      
      const user = {
        id: role_id || 1,
        username: userData.username || userData.email,
        email: userData.email || userData.username,
        name: userData.name,
        role: role_id || 'user',
        role_id,
        company: userData.company || 'Mi Empresa',
        lastLogin: new Date().toISOString(),
      };
      
      return {
        user,
        token,
        role_id,
        message: 'Usuario registrado exitosamente'
      };
      
    } catch (error) {
      console.error('Error en registro:', error);
      
      const { category, suggestions } = getErrorDetails(error);
      
      if (category.title === 'Error de Autenticaci√≥n') {
        throw new Error('Ya existe una cuenta con este email o nombre de usuario. Intenta con datos diferentes o inicia sesi√≥n.');
      } else if (category.title === 'Error de Validaci√≥n') {
        throw new Error('Los datos proporcionados no son v√°lidos. Verifica que todos los campos est√©n completos y correctos.');
      } else if (category.title === 'Error de Permisos') {
        throw new Error('No tienes permisos para registrarte en este sistema. Contacta al administrador.');
      } else if (category.title === 'Error del Servidor') {
        throw new Error('Error interno del servidor durante el registro. Intenta m√°s tarde o contacta al soporte t√©cnico.');
      } else {
        throw new Error(error.response?.data?.message || error.message || 'Error inesperado durante el registro. Intenta nuevamente o contacta al soporte t√©cnico.');
      }
    }
  },

  /**
   * Verificar token y obtener informaci√≥n del usuario
   * Para API real, esto har√≠a una llamada al servidor para validar el token
   */
  verifyToken: async (token) => {
    try {
      if (!token) {
        throw new Error('Token no proporcionado');
      }
      
      // Verificar que el token tenga el formato JWT b√°sico
      const parts = token.split('.');
      if (parts.length !== 3) {
        throw new Error('Formato de token inv√°lido');
      }
      
      // Intentar hacer una llamada simple para verificar que el token funciona
      try {
        await apiClient.getCategories();
      } catch (apiError) {
        throw new Error('Token inv√°lido o expirado');
      }
      
      // Si llegamos aqu√≠, el token es v√°lido
      const storedUser = JSON.parse(localStorage.getItem('auth-store') || '{}');
      
      if (storedUser.state?.user) {
        return {
          user: storedUser.state.user,
          valid: true
        };
      }
      
      // Si no hay usuario almacenado, crear uno b√°sico
      return {
        user: {
          id: 1,
          username: 'user',
          email: 'user@example.com',
          role: 'user',
          role_id: 1,
          name: 'Usuario',
          company: 'ERP Systems Inc.',
          lastLogin: new Date().toISOString(),
        },
        valid: true
      };
      
    } catch (error) {
      console.error('Error verificando token:', error);
      throw new Error('Token inv√°lido o expirado');
    }
  },

  /**
   * Obtener perfil del usuario actual
   */
  getProfile: async () => {
    try {
      const token = localStorage.getItem('auth_token');
      
      if (!token) {
        throw new Error('No hay token de autenticaci√≥n');
      }
      
      // Si tu API tiene un endpoint para obtener el perfil, √∫salo as√≠:
      // const response = await apiService.get('/profile');
      // return response;
      
      return await authService.verifyToken(token);
      
    } catch (error) {
      console.error('Error obteniendo perfil:', error);
      throw error;
    }
  },

  /**
   * Actualizar perfil de usuario
   */
  updateProfile: async (profileData) => {
    try {
      // Por ahora mantenemos funcionalidad b√°sica hasta que haya endpoint espec√≠fico
      // const response = await apiClient.updateProfile(profileData);
      
      throw new Error('La actualizaci√≥n de perfil no est√° disponible actualmente');
      
    } catch (error) {
      console.error('Error actualizando perfil:', error);
      
      const { category, suggestions } = getErrorDetails(error);
      
      if (category.title === 'Error de Autenticaci√≥n') {
        throw new Error('Tu sesi√≥n ha expirado. Por favor, inicia sesi√≥n nuevamente.');
      } else if (category.title === 'Error de Permisos') {
        throw new Error('No tienes permisos para actualizar este perfil.');
      } else if (category.title === 'Error de Validaci√≥n') {
        throw new Error('Los datos proporcionados no son v√°lidos. Verifica que todos los campos est√©n correctos.');
      } else if (category.title === 'Error del Servidor') {
        throw new Error('Error interno del servidor. No se pudo actualizar tu perfil. Intenta m√°s tarde.');
      } else {
        throw new Error(error.message || 'Error inesperado al actualizar el perfil. Intenta nuevamente.');
      }
    }
  },

  /**
   * Cambiar contrase√±a
   */
  changePassword: async (passwordData) => {
    try {
      // Por ahora mantenemos funcionalidad b√°sica hasta que haya endpoint espec√≠fico  
      // await apiClient.changePassword(passwordData);
      
      throw new Error('El cambio de contrase√±a no est√° disponible actualmente');
      
    } catch (error) {
      console.error('Error cambiando contrase√±a:', error);
      
      const { category, suggestions } = getErrorDetails(error);
      
      if (category.title === 'Error de Autenticaci√≥n') {
        throw new Error('Tu sesi√≥n ha expirado. Por favor, inicia sesi√≥n nuevamente.');
      } else if (category.title === 'Error de Permisos') {
        throw new Error('La contrase√±a actual es incorrecta. Verifica e intenta nuevamente.');
      } else if (category.title === 'Error de Validaci√≥n') {
        throw new Error('Los datos proporcionados no son v√°lidos. Aseg√∫rate de completar todos los campos.');
      } else if (category.title === 'Error del Servidor') {
        throw new Error('Error interno del servidor. No se pudo cambiar tu contrase√±a. Intenta m√°s tarde.');
      } else {
        throw new Error(error.message || 'Error inesperado al cambiar la contrase√±a. Intenta nuevamente.');
      }
    }
  },

  /**
   * Recuperar contrase√±a
   */
  forgotPassword: async (emailOrUsername) => {
    try {
      // Por ahora mantenemos funcionalidad b√°sica hasta que haya endpoint espec√≠fico
      // await apiClient.forgotPassword(emailOrUsername);
      
      throw new Error('La recuperaci√≥n de contrase√±a no est√° disponible actualmente');
      
    } catch (error) {
      console.error('Error en recuperaci√≥n de contrase√±a:', error);
      
      const { category, suggestions } = getErrorDetails(error);
      
      if (category.title === 'Error de Autenticaci√≥n') {
        throw new Error('No se encontr√≥ una cuenta con ese email o nombre de usuario. Verifica los datos ingresados.');
      } else if (category.title === 'Error de Validaci√≥n') {
        throw new Error('Los datos proporcionados no son v√°lidos. Aseg√∫rate de ingresar un email o usuario v√°lido.');
      } else if (category.title === 'L√≠mite de Solicitudes') {
        throw new Error('Has solicitado demasiadas recuperaciones de contrase√±a. Espera unos minutos antes de intentar nuevamente.');
      } else if (category.title === 'Error del Servidor') {
        throw new Error('Error interno del servidor. No se pudo enviar el email de recuperaci√≥n. Intenta m√°s tarde.');
      } else if (category.title === 'Error de Conexi√≥n') {
        throw new Error('No se puede conectar al servidor. Verifica tu conexi√≥n a internet o contacta al soporte t√©cnico.');
      } else {
        throw new Error(error.message || 'Error inesperado al enviar el email de recuperaci√≥n. Intenta nuevamente.');
      }
    }
  },

  /**
   * Cerrar sesi√≥n usando el cliente oficial
   */
  logout: async () => {
    try {
      // Usar el m√©todo logout del cliente oficial
      apiClient.logout();
      
      return {
        message: 'Sesi√≥n cerrada exitosamente'
      };
      
    } catch (error) {
      console.error('Error en logout:', error);
      // No lanzar error en logout para permitir cerrar sesi√≥n localmente
      return {
        message: 'Sesi√≥n cerrada'
      };
    }
  }
};

export default authService;
